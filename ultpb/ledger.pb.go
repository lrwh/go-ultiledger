// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ledger.proto

package ultpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LedgerHeader struct {
	// Version of pb message, each time we update the pb message definition, the
	// version number will incremented. The specific version number to use is
	// hard coded and changed each time we do some changes.
	Version uint32 `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	// Hash of the previous ledger.
	PrevLedgerHash string `protobuf:"bytes,2,opt,name=PrevLedgerHash" json:"PrevLedgerHash,omitempty"`
	// Hash of the transaction set in this ledger.
	TxSetHash string `protobuf:"bytes,3,opt,name=TxSetHash" json:"TxSetHash,omitempty"`
	// The consensus value the network agreed in hex coding string.
	ConsensusValue string `protobuf:"bytes,4,opt,name=ConsensusValue" json:"ConsensusValue,omitempty"`
	// Maximun number of transactions allowed in a transaction list.
	MaxTxListSize uint32 `protobuf:"varint,5,opt,name=MaxTxListSize" json:"MaxTxListSize,omitempty"`
	// Sequence number of this ledger.
	SeqNum uint64 `protobuf:"varint,6,opt,name=SeqNum" json:"SeqNum,omitempty"`
	// Total number of tokens in existence.
	TotalTokens int64 `protobuf:"varint,7,opt,name=TotalTokens" json:"TotalTokens,omitempty"`
	// Base fee per operation.
	BaseFee int64 `protobuf:"varint,8,opt,name=BaseFee" json:"BaseFee,omitempty"`
	// Base reserve for an account.
	BaseReserve int64 `protobuf:"varint,9,opt,name=BaseReserve" json:"BaseReserve,omitempty"`
	// Close time.
	CloseTime int64 `protobuf:"varint,10,opt,name=CloseTime" json:"CloseTime,omitempty"`
}

func (m *LedgerHeader) Reset()                    { *m = LedgerHeader{} }
func (m *LedgerHeader) String() string            { return proto.CompactTextString(m) }
func (*LedgerHeader) ProtoMessage()               {}
func (*LedgerHeader) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *LedgerHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *LedgerHeader) GetPrevLedgerHash() string {
	if m != nil {
		return m.PrevLedgerHash
	}
	return ""
}

func (m *LedgerHeader) GetTxSetHash() string {
	if m != nil {
		return m.TxSetHash
	}
	return ""
}

func (m *LedgerHeader) GetConsensusValue() string {
	if m != nil {
		return m.ConsensusValue
	}
	return ""
}

func (m *LedgerHeader) GetMaxTxListSize() uint32 {
	if m != nil {
		return m.MaxTxListSize
	}
	return 0
}

func (m *LedgerHeader) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *LedgerHeader) GetTotalTokens() int64 {
	if m != nil {
		return m.TotalTokens
	}
	return 0
}

func (m *LedgerHeader) GetBaseFee() int64 {
	if m != nil {
		return m.BaseFee
	}
	return 0
}

func (m *LedgerHeader) GetBaseReserve() int64 {
	if m != nil {
		return m.BaseReserve
	}
	return 0
}

func (m *LedgerHeader) GetCloseTime() int64 {
	if m != nil {
		return m.CloseTime
	}
	return 0
}

// Full ledger info of a ledger index.
type Ledger struct {
	LedgerHeader *LedgerHeader `protobuf:"bytes,1,opt,name=LedgerHeader" json:"LedgerHeader,omitempty"`
	TxSet        *TxSet        `protobuf:"bytes,2,opt,name=TxSet" json:"TxSet,omitempty"`
}

func (m *Ledger) Reset()                    { *m = Ledger{} }
func (m *Ledger) String() string            { return proto.CompactTextString(m) }
func (*Ledger) ProtoMessage()               {}
func (*Ledger) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Ledger) GetLedgerHeader() *LedgerHeader {
	if m != nil {
		return m.LedgerHeader
	}
	return nil
}

func (m *Ledger) GetTxSet() *TxSet {
	if m != nil {
		return m.TxSet
	}
	return nil
}

// LedgerCheckpoint contains the states of the latest closed ledger.
// It is mainly used for making the snapshot of the states of the
// latest closed ledger so that the node can recover its states
// after node failures.
type LedgerCheckpoint struct {
	// Timestamp of last ledger closed.
	LastCloseTime int64 `protobuf:"varint,1,opt,name=LastCloseTime" json:"LastCloseTime,omitempty"`
	// The number of ledgers processed.
	LedgerHeaderCount int64 `protobuf:"varint,2,opt,name=LedgerHeaderCount" json:"LedgerHeaderCount,omitempty"`
	// The largest consensus index that the manager met.
	LargestConsensusIndex uint64 `protobuf:"varint,3,opt,name=LargestConsensusIndex" json:"LargestConsensusIndex,omitempty"`
	// Previous committed ledger header.
	PrevLedgerHeader *LedgerHeader `protobuf:"bytes,4,opt,name=PrevLedgerHeader" json:"PrevLedgerHeader,omitempty"`
	// Hash of previous committed ledger header.
	PrevLedgerHeaderHash string `protobuf:"bytes,5,opt,name=PrevLedgerHeaderHash" json:"PrevLedgerHeaderHash,omitempty"`
	// Current latest committed ledger header.
	CurrLedgerHeader *LedgerHeader `protobuf:"bytes,6,opt,name=CurrLedgerHeader" json:"CurrLedgerHeader,omitempty"`
	// Hash of current latest committed ledger header.
	CurrLedgerHeaderHash string `protobuf:"bytes,7,opt,name=CurrLedgerHeaderHash" json:"CurrLedgerHeaderHash,omitempty"`
}

func (m *LedgerCheckpoint) Reset()                    { *m = LedgerCheckpoint{} }
func (m *LedgerCheckpoint) String() string            { return proto.CompactTextString(m) }
func (*LedgerCheckpoint) ProtoMessage()               {}
func (*LedgerCheckpoint) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *LedgerCheckpoint) GetLastCloseTime() int64 {
	if m != nil {
		return m.LastCloseTime
	}
	return 0
}

func (m *LedgerCheckpoint) GetLedgerHeaderCount() int64 {
	if m != nil {
		return m.LedgerHeaderCount
	}
	return 0
}

func (m *LedgerCheckpoint) GetLargestConsensusIndex() uint64 {
	if m != nil {
		return m.LargestConsensusIndex
	}
	return 0
}

func (m *LedgerCheckpoint) GetPrevLedgerHeader() *LedgerHeader {
	if m != nil {
		return m.PrevLedgerHeader
	}
	return nil
}

func (m *LedgerCheckpoint) GetPrevLedgerHeaderHash() string {
	if m != nil {
		return m.PrevLedgerHeaderHash
	}
	return ""
}

func (m *LedgerCheckpoint) GetCurrLedgerHeader() *LedgerHeader {
	if m != nil {
		return m.CurrLedgerHeader
	}
	return nil
}

func (m *LedgerCheckpoint) GetCurrLedgerHeaderHash() string {
	if m != nil {
		return m.CurrLedgerHeaderHash
	}
	return ""
}

func init() {
	proto.RegisterType((*LedgerHeader)(nil), "ultpb.LedgerHeader")
	proto.RegisterType((*Ledger)(nil), "ultpb.Ledger")
	proto.RegisterType((*LedgerCheckpoint)(nil), "ultpb.LedgerCheckpoint")
}

func init() { proto.RegisterFile("ledger.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x25, 0xdb, 0x36, 0xb5, 0xb7, 0x5d, 0xd9, 0x1d, 0x3f, 0x18, 0xc4, 0x87, 0x10, 0x44, 0xf2,
	0x20, 0x7d, 0xa8, 0x82, 0x8f, 0x82, 0x01, 0x51, 0x88, 0x22, 0xd3, 0xb0, 0xef, 0xb3, 0xdb, 0xcb,
	0x6e, 0xd8, 0xec, 0x4c, 0x9d, 0x99, 0x2c, 0xc1, 0x1f, 0xe0, 0xef, 0xf3, 0x27, 0xc9, 0xdc, 0xe9,
	0xda, 0x24, 0xad, 0xbe, 0x65, 0xce, 0x39, 0x77, 0xce, 0xdc, 0x73, 0x6f, 0x60, 0x51, 0xe3, 0xe6,
	0x1a, 0xcd, 0x72, 0x6b, 0xb4, 0xd3, 0x6c, 0xd2, 0xd4, 0x6e, 0x7b, 0xf9, 0xe2, 0xdc, 0x19, 0xa9,
	0xac, 0xbc, 0x72, 0x95, 0x56, 0x81, 0x49, 0x7f, 0x9f, 0xc0, 0xa2, 0x20, 0xe9, 0x67, 0x94, 0x1b,
	0x34, 0x8c, 0xc3, 0xf4, 0x02, 0x8d, 0xad, 0xb4, 0xe2, 0x51, 0x12, 0x65, 0xa7, 0xe2, 0xe1, 0xc8,
	0x5e, 0xc3, 0xe3, 0xef, 0x06, 0xef, 0x77, 0x6a, 0x69, 0x6f, 0xf8, 0x49, 0x12, 0x65, 0x33, 0x31,
	0x40, 0xd9, 0x4b, 0x98, 0x95, 0xed, 0x1a, 0x1d, 0x49, 0x46, 0x24, 0xd9, 0x03, 0xfe, 0x96, 0x5c,
	0x2b, 0x8b, 0xca, 0x36, 0xf6, 0x42, 0xd6, 0x0d, 0xf2, 0x71, 0xb8, 0xa5, 0x8f, 0xb2, 0x57, 0x70,
	0xfa, 0x55, 0xb6, 0x65, 0x5b, 0x54, 0xd6, 0xad, 0xab, 0x9f, 0xc8, 0x27, 0xf4, 0x9a, 0x3e, 0xc8,
	0x9e, 0x43, 0xbc, 0xc6, 0x1f, 0xdf, 0x9a, 0x3b, 0x1e, 0x27, 0x51, 0x36, 0x16, 0xbb, 0x13, 0x4b,
	0x60, 0x5e, 0x6a, 0x27, 0xeb, 0x52, 0xdf, 0xa2, 0xb2, 0x7c, 0x9a, 0x44, 0xd9, 0x48, 0x74, 0x21,
	0xdf, 0xe7, 0x47, 0x69, 0xf1, 0x13, 0x22, 0x7f, 0x44, 0xec, 0xc3, 0xd1, 0xd7, 0xfa, 0x4f, 0x81,
	0x16, 0xcd, 0x3d, 0xf2, 0x59, 0xa8, 0xed, 0x40, 0xbe, 0xc3, 0xbc, 0xd6, 0x16, 0xcb, 0xea, 0x0e,
	0x39, 0x10, 0xbf, 0x07, 0x52, 0x84, 0x38, 0xa4, 0xc1, 0xde, 0xf7, 0xb3, 0xa5, 0x40, 0xe7, 0xab,
	0x27, 0x4b, 0x9a, 0xc6, 0xb2, 0x4b, 0x89, 0xfe, 0x10, 0x52, 0x98, 0x50, 0x62, 0x94, 0xf0, 0x7c,
	0xb5, 0xd8, 0x55, 0x10, 0x26, 0x02, 0x95, 0xfe, 0x1a, 0xc1, 0x59, 0x28, 0xca, 0x6f, 0xf0, 0xea,
	0x76, 0xab, 0x2b, 0xe5, 0x7c, 0x6a, 0x85, 0xb4, 0x6e, 0xff, 0xba, 0x88, 0x5e, 0xd7, 0x07, 0xd9,
	0x1b, 0x38, 0xef, 0xda, 0xe5, 0xba, 0x51, 0xc1, 0x6a, 0x24, 0x0e, 0x09, 0xf6, 0x0e, 0x9e, 0x15,
	0xd2, 0x5c, 0xa3, 0x75, 0x7f, 0x47, 0xf4, 0x45, 0x6d, 0xb0, 0xa5, 0xd9, 0x8e, 0xc5, 0x71, 0x92,
	0x7d, 0x80, 0xb3, 0xce, 0x5e, 0x84, 0xfe, 0xc7, 0xff, 0xee, 0xff, 0x40, 0xcc, 0x56, 0xf0, 0x74,
	0x88, 0xd1, 0x46, 0x4d, 0x68, 0x5d, 0x8e, 0x72, 0xde, 0x34, 0x6f, 0x8c, 0xe9, 0x99, 0xc6, 0xff,
	0x31, 0x1d, 0x8a, 0xbd, 0xe9, 0x10, 0x23, 0xd3, 0x69, 0x30, 0x3d, 0xc6, 0x5d, 0xc6, 0xf4, 0x27,
	0xbd, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x69, 0xde, 0x35, 0xe4, 0x73, 0x03, 0x00, 0x00,
}
