// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ledger.proto

package ultpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LedgerHeader struct {
	// version of pb message, each time we update the pb message definition, the
	// version number will incremented. The specific version number to use is
	// hard coded and changed each time we do some changes.
	Version uint32 `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	// hash of the previous ledger
	PrevLedgerHash string `protobuf:"bytes,2,opt,name=PrevLedgerHash" json:"PrevLedgerHash,omitempty"`
	// hash of the transaction set in this ledger
	TxSetHash string `protobuf:"bytes,3,opt,name=TxSetHash" json:"TxSetHash,omitempty"`
	// the consensus value the network agreed in hex coding string
	ConsensusValue string `protobuf:"bytes,4,opt,name=ConsensusValue" json:"ConsensusValue,omitempty"`
	// maximun number of transactions allowed in a transaction list
	MaxTxListSize uint32 `protobuf:"varint,5,opt,name=MaxTxListSize" json:"MaxTxListSize,omitempty"`
	// sequence number of this ledger
	SeqNum uint64 `protobuf:"varint,6,opt,name=SeqNum" json:"SeqNum,omitempty"`
	// total number of tokens in existence
	TotalTokens uint64 `protobuf:"varint,7,opt,name=TotalTokens" json:"TotalTokens,omitempty"`
	// base fee per operation
	BaseFee uint64 `protobuf:"varint,8,opt,name=BaseFee" json:"BaseFee,omitempty"`
	// base reserver for an account
	BaseReserve uint64 `protobuf:"varint,9,opt,name=BaseReserve" json:"BaseReserve,omitempty"`
	// close time
	CloseTime int64 `protobuf:"varint,10,opt,name=CloseTime" json:"CloseTime,omitempty"`
}

func (m *LedgerHeader) Reset()                    { *m = LedgerHeader{} }
func (m *LedgerHeader) String() string            { return proto.CompactTextString(m) }
func (*LedgerHeader) ProtoMessage()               {}
func (*LedgerHeader) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *LedgerHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *LedgerHeader) GetPrevLedgerHash() string {
	if m != nil {
		return m.PrevLedgerHash
	}
	return ""
}

func (m *LedgerHeader) GetTxSetHash() string {
	if m != nil {
		return m.TxSetHash
	}
	return ""
}

func (m *LedgerHeader) GetConsensusValue() string {
	if m != nil {
		return m.ConsensusValue
	}
	return ""
}

func (m *LedgerHeader) GetMaxTxListSize() uint32 {
	if m != nil {
		return m.MaxTxListSize
	}
	return 0
}

func (m *LedgerHeader) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *LedgerHeader) GetTotalTokens() uint64 {
	if m != nil {
		return m.TotalTokens
	}
	return 0
}

func (m *LedgerHeader) GetBaseFee() uint64 {
	if m != nil {
		return m.BaseFee
	}
	return 0
}

func (m *LedgerHeader) GetBaseReserve() uint64 {
	if m != nil {
		return m.BaseReserve
	}
	return 0
}

func (m *LedgerHeader) GetCloseTime() int64 {
	if m != nil {
		return m.CloseTime
	}
	return 0
}

func init() {
	proto.RegisterType((*LedgerHeader)(nil), "ultpb.LedgerHeader")
}

func init() { proto.RegisterFile("ledger.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0xd9, 0xfe, 0x75, 0x63, 0xeb, 0x21, 0x07, 0x99, 0x83, 0x87, 0x45, 0x44, 0xf6, 0xe4,
	0xc5, 0x6f, 0x60, 0x41, 0x3c, 0x54, 0x91, 0x6c, 0xe8, 0x3d, 0xa5, 0x0f, 0x5d, 0x4c, 0x37, 0x35,
	0x93, 0x2d, 0x8b, 0x9f, 0xd2, 0x8f, 0x24, 0x49, 0x5b, 0xda, 0x7a, 0xcb, 0xfb, 0xcd, 0x9b, 0x47,
	0xde, 0x88, 0x89, 0xc5, 0xea, 0x03, 0xfe, 0x61, 0xe3, 0x5d, 0x70, 0x72, 0xd8, 0xda, 0xb0, 0x59,
	0xde, 0xfe, 0xf6, 0xc4, 0x64, 0x9e, 0xf8, 0x0b, 0xcc, 0x0a, 0x5e, 0x92, 0x18, 0x2f, 0xe0, 0xb9,
	0x76, 0x0d, 0x65, 0x45, 0x56, 0x4e, 0xd5, 0x41, 0xca, 0x7b, 0x71, 0xf5, 0xee, 0xb1, 0xdd, 0xbb,
	0x0d, 0x7f, 0x52, 0xaf, 0xc8, 0xca, 0x5c, 0xfd, 0xa3, 0xf2, 0x46, 0xe4, 0xba, 0xab, 0x10, 0x92,
	0xa5, 0x9f, 0x2c, 0x47, 0x10, 0x53, 0x66, 0xae, 0x61, 0x34, 0xdc, 0xf2, 0xc2, 0xd8, 0x16, 0x34,
	0xd8, 0xa5, 0x9c, 0x53, 0x79, 0x27, 0xa6, 0xaf, 0xa6, 0xd3, 0xdd, 0xbc, 0xe6, 0x50, 0xd5, 0x3f,
	0xa0, 0x61, 0xfa, 0xcd, 0x39, 0x94, 0xd7, 0x62, 0x54, 0xe1, 0xfb, 0xad, 0x5d, 0xd3, 0xa8, 0xc8,
	0xca, 0x81, 0xda, 0x2b, 0x59, 0x88, 0x4b, 0xed, 0x82, 0xb1, 0xda, 0x7d, 0xa1, 0x61, 0x1a, 0xa7,
	0xe1, 0x29, 0x8a, 0x3d, 0x9f, 0x0c, 0xe3, 0x19, 0xa0, 0x8b, 0x34, 0x3d, 0xc8, 0xb8, 0x1b, 0x9f,
	0x0a, 0x0c, 0xbf, 0x05, 0xe5, 0xbb, 0xdd, 0x13, 0x14, 0x1b, 0xce, 0xac, 0x63, 0xe8, 0x7a, 0x0d,
	0x12, 0x45, 0x56, 0xf6, 0xd5, 0x11, 0x2c, 0x47, 0xe9, 0xc0, 0x8f, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xd3, 0xf7, 0x18, 0xd9, 0x70, 0x01, 0x00, 0x00,
}
