// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction.proto

package ultpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// every operation is related to a specific account and
// each transaction could contain one or more operations
type OpType int32

const (
	OpType_CREATE_ACCOUNT OpType = 0
	OpType_PAYMENT        OpType = 1
)

var OpType_name = map[int32]string{
	0: "CREATE_ACCOUNT",
	1: "PAYMENT",
}
var OpType_value = map[string]int32{
	"CREATE_ACCOUNT": 0,
	"PAYMENT":        1,
}

func (x OpType) String() string {
	return proto.EnumName(OpType_name, int32(x))
}
func (OpType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

// operation
type Op struct {
	// operation type of this transaction
	OpType OpType `protobuf:"varint,1,opt,name=OpType,enum=ultpb.OpType" json:"OpType,omitempty"`
	// operation details in wire format
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Op) Reset()                    { *m = Op{} }
func (m *Op) String() string            { return proto.CompactTextString(m) }
func (*Op) ProtoMessage()               {}
func (*Op) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Op) GetOpType() OpType {
	if m != nil {
		return m.OpType
	}
	return OpType_CREATE_ACCOUNT
}

func (m *Op) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// transaction
type Tx struct {
	// the source account for sending asset to the new account
	AccountID string `protobuf:"bytes,1,opt,name=AccountID" json:"AccountID,omitempty"`
	// fee to pay
	Fee uint64 `protobuf:"varint,2,opt,name=Fee" json:"Fee,omitempty"`
	// extra note about the transaction
	Note string `protobuf:"bytes,3,opt,name=Note" json:"Note,omitempty"`
	// unique transaction sequence number
	SequenceNumber uint64 `protobuf:"varint,4,opt,name=SequenceNumber" json:"SequenceNumber,omitempty"`
	// list of operations
	OpList []*Op `protobuf:"bytes,5,rep,name=OpList" json:"OpList,omitempty"`
}

func (m *Tx) Reset()                    { *m = Tx{} }
func (m *Tx) String() string            { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()               {}
func (*Tx) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *Tx) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *Tx) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Tx) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *Tx) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *Tx) GetOpList() []*Op {
	if m != nil {
		return m.OpList
	}
	return nil
}

type TxList struct {
	// hash of previous closed ledger header
	PrevLedgerHash string `protobuf:"bytes,1,opt,name=PrevLedgerHash" json:"PrevLedgerHash,omitempty"`
	// list of transactions
	Txs []*Tx `protobuf:"bytes,2,rep,name=Txs" json:"Txs,omitempty"`
}

func (m *TxList) Reset()                    { *m = TxList{} }
func (m *TxList) String() string            { return proto.CompactTextString(m) }
func (*TxList) ProtoMessage()               {}
func (*TxList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *TxList) GetPrevLedgerHash() string {
	if m != nil {
		return m.PrevLedgerHash
	}
	return ""
}

func (m *TxList) GetTxs() []*Tx {
	if m != nil {
		return m.Txs
	}
	return nil
}

// create a new account by sending asset to it
type CreateAccountOp struct {
	// destination account
	AccountID string `protobuf:"bytes,1,opt,name=AccountID" json:"AccountID,omitempty"`
	// initial balance in ULUs
	Balance uint64 `protobuf:"varint,2,opt,name=Balance" json:"Balance,omitempty"`
}

func (m *CreateAccountOp) Reset()                    { *m = CreateAccountOp{} }
func (m *CreateAccountOp) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountOp) ProtoMessage()               {}
func (*CreateAccountOp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *CreateAccountOp) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *CreateAccountOp) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

// peer to peer payment
type PaymentOp struct {
	// destination account of the payment
	AccountID string `protobuf:"bytes,1,opt,name=AccountID" json:"AccountID,omitempty"`
	// asset type of payment
	AssetType AssetType `protobuf:"varint,2,opt,name=AssetType,enum=ultpb.AssetType" json:"AssetType,omitempty"`
	// amount of payment in specified asset type
	Amount int64 `protobuf:"varint,3,opt,name=Amount" json:"Amount,omitempty"`
}

func (m *PaymentOp) Reset()                    { *m = PaymentOp{} }
func (m *PaymentOp) String() string            { return proto.CompactTextString(m) }
func (*PaymentOp) ProtoMessage()               {}
func (*PaymentOp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *PaymentOp) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *PaymentOp) GetAssetType() AssetType {
	if m != nil {
		return m.AssetType
	}
	return AssetType_NATIVE
}

func (m *PaymentOp) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*Op)(nil), "ultpb.Op")
	proto.RegisterType((*Tx)(nil), "ultpb.Tx")
	proto.RegisterType((*TxList)(nil), "ultpb.TxList")
	proto.RegisterType((*CreateAccountOp)(nil), "ultpb.CreateAccountOp")
	proto.RegisterType((*PaymentOp)(nil), "ultpb.PaymentOp")
	proto.RegisterEnum("ultpb.OpType", OpType_name, OpType_value)
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x4f, 0xf2, 0x40,
	0x10, 0xfd, 0xda, 0x42, 0x49, 0x87, 0xef, 0xe3, 0xab, 0x7b, 0x30, 0x8d, 0x7a, 0xc0, 0x26, 0x1a,
	0xf4, 0xd0, 0x03, 0xfe, 0x00, 0x53, 0x0b, 0x46, 0x12, 0x68, 0xc9, 0xba, 0x1e, 0x3c, 0x99, 0xa5,
	0x4e, 0x94, 0x04, 0xda, 0xd2, 0x6e, 0x4d, 0xf9, 0x1d, 0xfe, 0x61, 0xb3, 0x4b, 0x81, 0xc8, 0x45,
	0x6f, 0x6f, 0xde, 0xcc, 0xbc, 0xbc, 0xd9, 0xb7, 0x70, 0x24, 0x72, 0x9e, 0x14, 0x3c, 0x16, 0xf3,
	0x34, 0xf1, 0xb2, 0x3c, 0x15, 0x29, 0x69, 0x96, 0x0b, 0x91, 0xcd, 0x4e, 0xda, 0xbc, 0x28, 0x50,
	0x6c, 0x38, 0xf7, 0x16, 0xf4, 0x28, 0x23, 0x17, 0x60, 0x46, 0x19, 0x5b, 0x67, 0xe8, 0x68, 0x5d,
	0xad, 0xd7, 0xe9, 0xff, 0xf3, 0xd4, 0xa8, 0xb7, 0x21, 0x69, 0xdd, 0x24, 0x04, 0x1a, 0x03, 0x2e,
	0xb8, 0xa3, 0x77, 0xb5, 0xde, 0x5f, 0xaa, 0xb0, 0xfb, 0xa9, 0x81, 0xce, 0x2a, 0x72, 0x06, 0x96,
	0x1f, 0xc7, 0x69, 0x99, 0x88, 0xd1, 0x40, 0x89, 0x58, 0x74, 0x4f, 0x10, 0x1b, 0x8c, 0x7b, 0x44,
	0xb5, 0xd7, 0xa0, 0x12, 0x4a, 0xa9, 0x30, 0x15, 0xe8, 0x18, 0x6a, 0x54, 0x61, 0x72, 0x09, 0x9d,
	0x47, 0x5c, 0x95, 0x98, 0xc4, 0x18, 0x96, 0xcb, 0x19, 0xe6, 0x4e, 0x43, 0x2d, 0x1c, 0xb0, 0xe4,
	0x5c, 0xba, 0x1d, 0xcf, 0x0b, 0xe1, 0x34, 0xbb, 0x46, 0xaf, 0xdd, 0xb7, 0x76, 0x6e, 0x69, 0xdd,
	0x70, 0x27, 0x60, 0xb2, 0x4a, 0x22, 0x29, 0x3a, 0xcd, 0xf1, 0x63, 0x8c, 0xaf, 0x6f, 0x98, 0x3f,
	0xf0, 0xe2, 0xbd, 0x76, 0x77, 0xc0, 0x92, 0x53, 0x30, 0x58, 0x55, 0x38, 0xfa, 0x37, 0x45, 0x56,
	0x51, 0xc9, 0xba, 0x23, 0xf8, 0x1f, 0xe4, 0xc8, 0x05, 0xd6, 0x27, 0x45, 0xd9, 0x0f, 0x07, 0x3b,
	0xd0, 0xba, 0xe3, 0x0b, 0x9e, 0xc4, 0xdb, 0xa3, 0xb7, 0xa5, 0xbb, 0x02, 0x6b, 0xca, 0xd7, 0x4b,
	0xfc, 0x85, 0x88, 0x07, 0x96, 0x2f, 0xa3, 0x52, 0xc1, 0xe8, 0x2a, 0x18, 0xbb, 0x36, 0xb6, 0xe3,
	0xe9, 0x7e, 0x84, 0x1c, 0x83, 0xe9, 0x2f, 0xe5, 0xae, 0x7a, 0x55, 0x83, 0xd6, 0xd5, 0xf5, 0x15,
	0xec, 0x03, 0xec, 0x04, 0x74, 0xe8, 0xb3, 0xe1, 0x8b, 0x1f, 0x04, 0xd1, 0x53, 0xc8, 0xec, 0x3f,
	0xa4, 0x0d, 0xad, 0xa9, 0xff, 0x3c, 0x19, 0x86, 0xcc, 0xd6, 0x66, 0xa6, 0xfa, 0x15, 0x37, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xbd, 0xba, 0x71, 0x3e, 0x02, 0x00, 0x00,
}
