// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction.proto

package ultpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// every operation is related to a specific account and
// each transaction could contain one or more operations
type OpTypeEnum int32

const (
	OpTypeEnum_CREATE_ACCOUNT OpTypeEnum = 0
	OpTypeEnum_PAYMENT        OpTypeEnum = 1
)

var OpTypeEnum_name = map[int32]string{
	0: "CREATE_ACCOUNT",
	1: "PAYMENT",
}
var OpTypeEnum_value = map[string]int32{
	"CREATE_ACCOUNT": 0,
	"PAYMENT":        1,
}

func (x OpTypeEnum) String() string {
	return proto.EnumName(OpTypeEnum_name, int32(x))
}
func (OpTypeEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

// operation
type Op struct {
	// operation type of this transaction
	OpType OpTypeEnum `protobuf:"varint,1,opt,name=OpType,enum=ultpb.OpTypeEnum" json:"OpType,omitempty"`
	// operation details in wire format
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Op) Reset()                    { *m = Op{} }
func (m *Op) String() string            { return proto.CompactTextString(m) }
func (*Op) ProtoMessage()               {}
func (*Op) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Op) GetOpType() OpTypeEnum {
	if m != nil {
		return m.OpType
	}
	return OpTypeEnum_CREATE_ACCOUNT
}

func (m *Op) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// list of transactions
type Transaction struct {
	// the source account for sending asset to the new account
	AccountID string `protobuf:"bytes,1,opt,name=AccountID" json:"AccountID,omitempty"`
	// fee to pay
	Fee uint64 `protobuf:"varint,2,opt,name=Fee" json:"Fee,omitempty"`
	// extra note about the transaction
	Note string `protobuf:"bytes,3,opt,name=Note" json:"Note,omitempty"`
	// list of operations
	OpList []*Op `protobuf:"bytes,4,rep,name=OpList" json:"OpList,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Transaction) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *Transaction) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Transaction) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *Transaction) GetOpList() []*Op {
	if m != nil {
		return m.OpList
	}
	return nil
}

// create a new account by sending asset to it
type CreateAccountOp struct {
	// destination account
	AccountID string `protobuf:"bytes,1,opt,name=AccountID" json:"AccountID,omitempty"`
	// the initial asset and balance
	AssetType Asset_AssetTypeEnum `protobuf:"varint,2,opt,name=AssetType,enum=ultpb.Asset_AssetTypeEnum" json:"AssetType,omitempty"`
	Balance   int64               `protobuf:"varint,3,opt,name=Balance" json:"Balance,omitempty"`
}

func (m *CreateAccountOp) Reset()                    { *m = CreateAccountOp{} }
func (m *CreateAccountOp) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountOp) ProtoMessage()               {}
func (*CreateAccountOp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *CreateAccountOp) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *CreateAccountOp) GetAssetType() Asset_AssetTypeEnum {
	if m != nil {
		return m.AssetType
	}
	return Asset_NATIVE
}

func (m *CreateAccountOp) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

// peer to peer payment
type PaymentOp struct {
	// destination account of the payment
	AccountID string `protobuf:"bytes,1,opt,name=AccountID" json:"AccountID,omitempty"`
	// asset type of payment
	AssetType Asset_AssetTypeEnum `protobuf:"varint,2,opt,name=AssetType,enum=ultpb.Asset_AssetTypeEnum" json:"AssetType,omitempty"`
	// amount of payment in specified asset type
	Amount int64 `protobuf:"varint,3,opt,name=Amount" json:"Amount,omitempty"`
}

func (m *PaymentOp) Reset()                    { *m = PaymentOp{} }
func (m *PaymentOp) String() string            { return proto.CompactTextString(m) }
func (*PaymentOp) ProtoMessage()               {}
func (*PaymentOp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *PaymentOp) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *PaymentOp) GetAssetType() Asset_AssetTypeEnum {
	if m != nil {
		return m.AssetType
	}
	return Asset_NATIVE
}

func (m *PaymentOp) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*Op)(nil), "ultpb.Op")
	proto.RegisterType((*Transaction)(nil), "ultpb.Transaction")
	proto.RegisterType((*CreateAccountOp)(nil), "ultpb.CreateAccountOp")
	proto.RegisterType((*PaymentOp)(nil), "ultpb.PaymentOp")
	proto.RegisterEnum("ultpb.OpTypeEnum", OpTypeEnum_name, OpTypeEnum_value)
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x51, 0xbf, 0x4f, 0x83, 0x40,
	0x14, 0x96, 0x82, 0x34, 0x3c, 0x4c, 0xa5, 0x37, 0x18, 0xd2, 0x38, 0x20, 0x13, 0x9a, 0xc8, 0x50,
	0x17, 0xd7, 0x93, 0x62, 0x62, 0xa2, 0xd0, 0x5c, 0x70, 0x70, 0x32, 0x57, 0x72, 0x43, 0x93, 0x02,
	0x17, 0x38, 0x86, 0xc6, 0xd1, 0x7f, 0xdc, 0xf0, 0x38, 0xcb, 0xe8, 0xe4, 0xf6, 0xee, 0x7b, 0xdf,
	0x7d, 0x3f, 0xf2, 0x60, 0xa9, 0x5a, 0x5e, 0x77, 0xbc, 0x54, 0xfb, 0xa6, 0x8e, 0x65, 0xdb, 0xa8,
	0x86, 0x9c, 0xf7, 0x07, 0x25, 0x77, 0x2b, 0x97, 0x77, 0x9d, 0x50, 0x23, 0x16, 0x26, 0x30, 0xcb,
	0x25, 0xb9, 0x05, 0x3b, 0x97, 0xc5, 0x51, 0x0a, 0xdf, 0x08, 0x8c, 0x68, 0xb1, 0x5e, 0xc6, 0x48,
	0x8d, 0x47, 0x30, 0xad, 0xfb, 0x8a, 0x69, 0x02, 0x21, 0x60, 0x6d, 0xb8, 0xe2, 0xfe, 0x2c, 0x30,
	0xa2, 0x0b, 0x86, 0x73, 0xa8, 0xc0, 0x2d, 0x26, 0x37, 0x72, 0x0d, 0x0e, 0x2d, 0xcb, 0xa6, 0xaf,
	0xd5, 0xcb, 0x06, 0x05, 0x1d, 0x36, 0x01, 0xc4, 0x03, 0xf3, 0x59, 0x08, 0xfc, 0x6f, 0xb1, 0x61,
	0x1c, 0x24, 0xb3, 0x46, 0x09, 0xdf, 0x44, 0x2a, 0xce, 0xe4, 0x66, 0x48, 0xf4, 0xba, 0xef, 0x94,
	0x6f, 0x05, 0x66, 0xe4, 0xae, 0x9d, 0x53, 0x22, 0xa6, 0x17, 0xe1, 0xb7, 0x01, 0x97, 0x49, 0x2b,
	0xb8, 0x12, 0x5a, 0x3c, 0x97, 0x7f, 0x58, 0x3f, 0x82, 0x43, 0x87, 0xee, 0xd8, 0x74, 0x86, 0x4d,
	0x57, 0x5a, 0x17, 0xf1, 0xf8, 0xb4, 0xc5, 0xca, 0x13, 0x99, 0xf8, 0x30, 0x7f, 0xe2, 0x07, 0x5e,
	0x97, 0x63, 0x4a, 0x93, 0xfd, 0x3e, 0xc3, 0x2f, 0x70, 0xb6, 0xfc, 0x58, 0x89, 0x7f, 0xb5, 0xbf,
	0x02, 0x9b, 0x56, 0x83, 0x8a, 0x76, 0xd7, 0xaf, 0xbb, 0x7b, 0x80, 0xe9, 0x44, 0x84, 0xc0, 0x22,
	0x61, 0x29, 0x2d, 0xd2, 0x4f, 0x9a, 0x24, 0xf9, 0x7b, 0x56, 0x78, 0x67, 0xc4, 0x85, 0xf9, 0x96,
	0x7e, 0xbc, 0xa5, 0x59, 0xe1, 0x19, 0x3b, 0x1b, 0x6f, 0xfe, 0xf0, 0x13, 0x00, 0x00, 0xff, 0xff,
	0xa6, 0xb0, 0xb1, 0xbc, 0x1c, 0x02, 0x00, 0x00,
}
