// Code generated by protoc-gen-go. DO NOT EDIT.
// source: consensus.proto

package ultpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Statement is an abstractive value for nodes to vote
// and reach consensus. Each statement type has its
// corresponding data encoded in pb and saved in Data field.
type StatementType int32

const (
	StatementType_NOMINATE    StatementType = 0
	StatementType_PREPARE     StatementType = 1
	StatementType_CONFIRM     StatementType = 2
	StatementType_EXTERNALIZE StatementType = 3
)

var StatementType_name = map[int32]string{
	0: "NOMINATE",
	1: "PREPARE",
	2: "CONFIRM",
	3: "EXTERNALIZE",
}
var StatementType_value = map[string]int32{
	"NOMINATE":    0,
	"PREPARE":     1,
	"CONFIRM":     2,
	"EXTERNALIZE": 3,
}

func (x StatementType) String() string {
	return proto.EnumName(StatementType_name, int32(x))
}
func (StatementType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// ConsensusValue is used for reaching consensus in
// Federated Byzantine Agreement
type ConsensusValue struct {
	// hash of the transaction list
	TxListHash string `protobuf:"bytes,1,opt,name=TxListHash" json:"TxListHash,omitempty"`
	// propose time
	ProposeTime int64 `protobuf:"varint,2,opt,name=ProposeTime" json:"ProposeTime,omitempty"`
	// close time
	CloseTime int64 `protobuf:"varint,3,opt,name=CloseTime" json:"CloseTime,omitempty"`
}

func (m *ConsensusValue) Reset()                    { *m = ConsensusValue{} }
func (m *ConsensusValue) String() string            { return proto.CompactTextString(m) }
func (*ConsensusValue) ProtoMessage()               {}
func (*ConsensusValue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ConsensusValue) GetTxListHash() string {
	if m != nil {
		return m.TxListHash
	}
	return ""
}

func (m *ConsensusValue) GetProposeTime() int64 {
	if m != nil {
		return m.ProposeTime
	}
	return 0
}

func (m *ConsensusValue) GetCloseTime() int64 {
	if m != nil {
		return m.CloseTime
	}
	return 0
}

// Each ULTNode is associated with a quorum, every message
// related to FBA consensus should contain the quorum of
// the node
type Quorum struct {
	Threshold   float64   `protobuf:"fixed64,1,opt,name=Threshold" json:"Threshold,omitempty"`
	Validators  []string  `protobuf:"bytes,2,rep,name=Validators" json:"Validators,omitempty"`
	NestQuorums []*Quorum `protobuf:"bytes,3,rep,name=NestQuorums" json:"NestQuorums,omitempty"`
}

func (m *Quorum) Reset()                    { *m = Quorum{} }
func (m *Quorum) String() string            { return proto.CompactTextString(m) }
func (*Quorum) ProtoMessage()               {}
func (*Quorum) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Quorum) GetThreshold() float64 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *Quorum) GetValidators() []string {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *Quorum) GetNestQuorums() []*Quorum {
	if m != nil {
		return m.NestQuorums
	}
	return nil
}

// Nomination is used to find a candidate value for
// later federated voting of ballot
type Nomination struct {
	VoteList   []string `protobuf:"bytes,1,rep,name=VoteList" json:"VoteList,omitempty"`
	AcceptList []string `protobuf:"bytes,2,rep,name=AcceptList" json:"AcceptList,omitempty"`
	QuorumHash string   `protobuf:"bytes,3,opt,name=QuorumHash" json:"QuorumHash,omitempty"`
}

func (m *Nomination) Reset()                    { *m = Nomination{} }
func (m *Nomination) String() string            { return proto.CompactTextString(m) }
func (*Nomination) ProtoMessage()               {}
func (*Nomination) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Nomination) GetVoteList() []string {
	if m != nil {
		return m.VoteList
	}
	return nil
}

func (m *Nomination) GetAcceptList() []string {
	if m != nil {
		return m.AcceptList
	}
	return nil
}

func (m *Nomination) GetQuorumHash() string {
	if m != nil {
		return m.QuorumHash
	}
	return ""
}

// Ballot is used to finalize a consensus value for
// a specific decree
type Ballot struct {
	// ballot counter
	Counter uint32 `protobuf:"varint,1,opt,name=Counter" json:"Counter,omitempty"`
	// composite candidate value
	Value string `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *Ballot) Reset()                    { *m = Ballot{} }
func (m *Ballot) String() string            { return proto.CompactTextString(m) }
func (*Ballot) ProtoMessage()               {}
func (*Ballot) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *Ballot) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *Ballot) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Prepare message for ballot protocol
type Prepare struct {
	// current ballot
	B *Ballot `protobuf:"bytes,1,opt,name=B" json:"B,omitempty"`
	// two hightest ballot accepted as
	// prepared such as Q < P and Q ~ P
	Q *Ballot `protobuf:"bytes,2,opt,name=Q" json:"Q,omitempty"`
	P *Ballot `protobuf:"bytes,3,opt,name=P" json:"P,omitempty"`
	// counter of highest ballot confirmed as prepared
	HC uint32 `protobuf:"varint,4,opt,name=HC" json:"HC,omitempty"`
	// counter of lowest ballot confirmed as prepared
	LC         uint32 `protobuf:"varint,5,opt,name=LC" json:"LC,omitempty"`
	QuorumHash string `protobuf:"bytes,6,opt,name=QuorumHash" json:"QuorumHash,omitempty"`
}

func (m *Prepare) Reset()                    { *m = Prepare{} }
func (m *Prepare) String() string            { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()               {}
func (*Prepare) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *Prepare) GetB() *Ballot {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *Prepare) GetQ() *Ballot {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *Prepare) GetP() *Ballot {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *Prepare) GetHC() uint32 {
	if m != nil {
		return m.HC
	}
	return 0
}

func (m *Prepare) GetLC() uint32 {
	if m != nil {
		return m.LC
	}
	return 0
}

func (m *Prepare) GetQuorumHash() string {
	if m != nil {
		return m.QuorumHash
	}
	return ""
}

// Confirm message for ballot protocol
type Confirm struct {
	// current ballot
	B *Ballot `protobuf:"bytes,1,opt,name=B" json:"B,omitempty"`
	// counter of highest accepted prepared ballot
	PC uint32 `protobuf:"varint,2,opt,name=PC" json:"PC,omitempty"`
	// counter of lowest ballot for which the node has accepted commit
	LC uint32 `protobuf:"varint,3,opt,name=LC" json:"LC,omitempty"`
	// counter of highest ballot for which the node has accepted commit
	HC         uint32 `protobuf:"varint,4,opt,name=HC" json:"HC,omitempty"`
	QuorumHash string `protobuf:"bytes,5,opt,name=QuorumHash" json:"QuorumHash,omitempty"`
}

func (m *Confirm) Reset()                    { *m = Confirm{} }
func (m *Confirm) String() string            { return proto.CompactTextString(m) }
func (*Confirm) ProtoMessage()               {}
func (*Confirm) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *Confirm) GetB() *Ballot {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *Confirm) GetPC() uint32 {
	if m != nil {
		return m.PC
	}
	return 0
}

func (m *Confirm) GetLC() uint32 {
	if m != nil {
		return m.LC
	}
	return 0
}

func (m *Confirm) GetHC() uint32 {
	if m != nil {
		return m.HC
	}
	return 0
}

func (m *Confirm) GetQuorumHash() string {
	if m != nil {
		return m.QuorumHash
	}
	return ""
}

// Externalize message for ballot protocol
type Externalize struct {
	// lowest confirmed committed ballot
	B *Ballot `protobuf:"bytes,1,opt,name=B" json:"B,omitempty"`
	// counter of highest confirmed committed ballot
	HC         uint32 `protobuf:"varint,2,opt,name=HC" json:"HC,omitempty"`
	QuorumHash string `protobuf:"bytes,3,opt,name=QuorumHash" json:"QuorumHash,omitempty"`
}

func (m *Externalize) Reset()                    { *m = Externalize{} }
func (m *Externalize) String() string            { return proto.CompactTextString(m) }
func (*Externalize) ProtoMessage()               {}
func (*Externalize) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *Externalize) GetB() *Ballot {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *Externalize) GetHC() uint32 {
	if m != nil {
		return m.HC
	}
	return 0
}

func (m *Externalize) GetQuorumHash() string {
	if m != nil {
		return m.QuorumHash
	}
	return ""
}

type Statement struct {
	StatementType StatementType `protobuf:"varint,1,opt,name=StatementType,enum=ultpb.StatementType" json:"StatementType,omitempty"`
	// node ID of sender
	NodeID string `protobuf:"bytes,2,opt,name=NodeID" json:"NodeID,omitempty"`
	// decree index
	Index uint64 `protobuf:"varint,3,opt,name=Index" json:"Index,omitempty"`
	// nomination or ballot in pb format
	Data []byte `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Statement) Reset()                    { *m = Statement{} }
func (m *Statement) String() string            { return proto.CompactTextString(m) }
func (*Statement) ProtoMessage()               {}
func (*Statement) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *Statement) GetStatementType() StatementType {
	if m != nil {
		return m.StatementType
	}
	return StatementType_NOMINATE
}

func (m *Statement) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *Statement) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Statement) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ConsensusValue)(nil), "ultpb.ConsensusValue")
	proto.RegisterType((*Quorum)(nil), "ultpb.Quorum")
	proto.RegisterType((*Nomination)(nil), "ultpb.Nomination")
	proto.RegisterType((*Ballot)(nil), "ultpb.Ballot")
	proto.RegisterType((*Prepare)(nil), "ultpb.Prepare")
	proto.RegisterType((*Confirm)(nil), "ultpb.Confirm")
	proto.RegisterType((*Externalize)(nil), "ultpb.Externalize")
	proto.RegisterType((*Statement)(nil), "ultpb.Statement")
	proto.RegisterEnum("ultpb.StatementType", StatementType_name, StatementType_value)
}

func init() { proto.RegisterFile("consensus.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xdd, 0x8a, 0xda, 0x40,
	0x18, 0xed, 0x24, 0xfe, 0xac, 0x5f, 0x56, 0x57, 0x86, 0xa5, 0x84, 0xb6, 0x14, 0xf1, 0x4a, 0x7a,
	0x61, 0x61, 0x7b, 0x53, 0x7a, 0xa7, 0xd9, 0x14, 0x05, 0x37, 0x1b, 0xa7, 0x41, 0xca, 0xde, 0xcd,
	0xea, 0x14, 0x03, 0x49, 0x26, 0xcc, 0x4c, 0x5a, 0xdb, 0x37, 0xe8, 0x5b, 0xf4, 0x51, 0xcb, 0x4c,
	0xd4, 0xa8, 0x81, 0xf6, 0x2e, 0xe7, 0x9c, 0x99, 0xef, 0x9c, 0xf3, 0x0d, 0x81, 0x9b, 0x35, 0xcf,
	0x24, 0xcb, 0x64, 0x21, 0xc7, 0xb9, 0xe0, 0x8a, 0xe3, 0x66, 0x91, 0xa8, 0xfc, 0x79, 0x98, 0x43,
	0xcf, 0x3b, 0x28, 0x2b, 0x9a, 0x14, 0x0c, 0xbf, 0x05, 0x88, 0x76, 0x8b, 0x58, 0xaa, 0x19, 0x95,
	0x5b, 0x17, 0x0d, 0xd0, 0xa8, 0x43, 0x4e, 0x18, 0x3c, 0x00, 0x27, 0x14, 0x3c, 0xe7, 0x92, 0x45,
	0x71, 0xca, 0x5c, 0x6b, 0x80, 0x46, 0x36, 0x39, 0xa5, 0xf0, 0x1b, 0xe8, 0x78, 0xc9, 0x41, 0xb7,
	0x8d, 0x5e, 0x11, 0xc3, 0x1f, 0xd0, 0x5a, 0x16, 0x5c, 0x14, 0xa9, 0x3e, 0x17, 0x6d, 0x05, 0x93,
	0x5b, 0x9e, 0x6c, 0x8c, 0x11, 0x22, 0x15, 0xa1, 0x73, 0xac, 0x68, 0x12, 0x6f, 0xa8, 0xe2, 0x42,
	0xba, 0xd6, 0xc0, 0xd6, 0x39, 0x2a, 0x06, 0xbf, 0x07, 0x27, 0x60, 0x52, 0x95, 0xb3, 0xa4, 0x6b,
	0x0f, 0xec, 0x91, 0x73, 0xd7, 0x1d, 0x9b, 0x5a, 0xe3, 0x92, 0x25, 0xa7, 0x27, 0x86, 0x5b, 0x80,
	0x80, 0xa7, 0x71, 0x46, 0x55, 0xcc, 0x33, 0xfc, 0x0a, 0xae, 0x56, 0x5c, 0x31, 0x5d, 0xcb, 0x45,
	0x66, 0xf8, 0x11, 0x6b, 0xeb, 0xc9, 0x7a, 0xcd, 0x72, 0x65, 0xd4, 0xbd, 0x75, 0xc5, 0x68, 0xbd,
	0x1c, 0x6a, 0x56, 0x64, 0x97, 0x2b, 0xaa, 0x98, 0xe1, 0x47, 0x68, 0x4d, 0x69, 0x92, 0x70, 0x85,
	0x5d, 0x68, 0x7b, 0xbc, 0xc8, 0x14, 0x13, 0xa6, 0x60, 0x97, 0x1c, 0x20, 0xbe, 0x85, 0xa6, 0xd9,
	0xb7, 0x59, 0x60, 0x87, 0x94, 0x60, 0xf8, 0x07, 0x41, 0x3b, 0x14, 0x2c, 0xa7, 0x82, 0xe1, 0xd7,
	0x80, 0xa6, 0xe6, 0x56, 0x55, 0xab, 0x9c, 0x4a, 0xd0, 0x54, 0x8b, 0x4b, 0x73, 0xb5, 0x2e, 0x2e,
	0xb5, 0x18, 0x9a, 0x58, 0x75, 0x31, 0xc4, 0x3d, 0xb0, 0x66, 0x9e, 0xdb, 0x30, 0x69, 0xac, 0x99,
	0xa7, 0xf1, 0xc2, 0x73, 0x9b, 0x25, 0x5e, 0x78, 0x17, 0xe5, 0x5a, 0xb5, 0x72, 0xdf, 0x75, 0xa5,
	0xec, 0x5b, 0x2c, 0xd2, 0x7f, 0x27, 0xec, 0x81, 0x15, 0x7a, 0x26, 0x62, 0x97, 0x58, 0xe1, 0xc1,
	0xc7, 0x3e, 0xfa, 0x5c, 0xe6, 0x38, 0xf7, 0x6d, 0xd6, 0x7c, 0x9f, 0xc0, 0xf1, 0x77, 0x8a, 0x89,
	0x8c, 0x26, 0xf1, 0x2f, 0xf6, 0x5f, 0xef, 0xd9, 0xd1, 0xbb, 0x36, 0xbb, 0xfe, 0x60, 0xbf, 0x11,
	0x74, 0xbe, 0x28, 0xaa, 0x58, 0xca, 0x32, 0x85, 0x3f, 0x41, 0xf7, 0x08, 0xa2, 0x9f, 0x39, 0x33,
	0x36, 0xbd, 0xbb, 0xdb, 0xbd, 0xcd, 0x99, 0x46, 0xce, 0x8f, 0xe2, 0x97, 0xd0, 0x0a, 0xf8, 0x86,
	0xcd, 0xef, 0xf7, 0xef, 0xba, 0x47, 0xfa, 0xb9, 0xe7, 0xd9, 0x86, 0xed, 0x8c, 0x79, 0x83, 0x94,
	0x00, 0x63, 0x68, 0xdc, 0x53, 0x45, 0xcd, 0x16, 0xae, 0x89, 0xf9, 0x7e, 0x37, 0xbb, 0x70, 0xc7,
	0xd7, 0x70, 0x15, 0x3c, 0x3e, 0xcc, 0x83, 0x49, 0xe4, 0xf7, 0x5f, 0x60, 0x07, 0xda, 0x21, 0xf1,
	0xc3, 0x09, 0xf1, 0xfb, 0x48, 0x03, 0xef, 0x31, 0xf8, 0x3c, 0x27, 0x0f, 0x7d, 0x0b, 0xdf, 0x80,
	0xe3, 0x7f, 0x8d, 0x7c, 0x12, 0x4c, 0x16, 0xf3, 0x27, 0xbf, 0x6f, 0x3f, 0xb7, 0xcc, 0x9f, 0xfe,
	0xe1, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xb1, 0x3d, 0x4f, 0xfc, 0x03, 0x00, 0x00,
}
