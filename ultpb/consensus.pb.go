// Code generated by protoc-gen-go. DO NOT EDIT.
// source: consensus.proto

package ultpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Statement is an abstractive value for nodes to vote
// and reach consensus. Each statement type has its
// corresponding data encoded in pb and saved in Data field.
type StatementType int32

const (
	StatementType_NOMINATE    StatementType = 0
	StatementType_PREPARE     StatementType = 1
	StatementType_CONFIRM     StatementType = 2
	StatementType_EXTERNALIZE StatementType = 3
)

var StatementType_name = map[int32]string{
	0: "NOMINATE",
	1: "PREPARE",
	2: "CONFIRM",
	3: "EXTERNALIZE",
}
var StatementType_value = map[string]int32{
	"NOMINATE":    0,
	"PREPARE":     1,
	"CONFIRM":     2,
	"EXTERNALIZE": 3,
}

func (x StatementType) String() string {
	return proto.EnumName(StatementType_name, int32(x))
}
func (StatementType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// ConsensusValue is used for reaching consensus in
// Federated Byzantine Agreement
type ConsensusValue struct {
	// hash of the transaction list
	TxListHash string `protobuf:"bytes,1,opt,name=TxListHash" json:"TxListHash,omitempty"`
	// propose time
	ProposeTime int64 `protobuf:"varint,2,opt,name=ProposeTime" json:"ProposeTime,omitempty"`
	// close time
	CloseTime int64 `protobuf:"varint,3,opt,name=CloseTime" json:"CloseTime,omitempty"`
}

func (m *ConsensusValue) Reset()                    { *m = ConsensusValue{} }
func (m *ConsensusValue) String() string            { return proto.CompactTextString(m) }
func (*ConsensusValue) ProtoMessage()               {}
func (*ConsensusValue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ConsensusValue) GetTxListHash() string {
	if m != nil {
		return m.TxListHash
	}
	return ""
}

func (m *ConsensusValue) GetProposeTime() int64 {
	if m != nil {
		return m.ProposeTime
	}
	return 0
}

func (m *ConsensusValue) GetCloseTime() int64 {
	if m != nil {
		return m.CloseTime
	}
	return 0
}

// Each ULTNode is associated with a quorum, every message
// related to FBA consensus should contain the quorum of
// the node
type Quorum struct {
	Threshold   float64   `protobuf:"fixed64,1,opt,name=Threshold" json:"Threshold,omitempty"`
	Validators  string    `protobuf:"bytes,2,opt,name=Validators" json:"Validators,omitempty"`
	NestQuorums []*Quorum `protobuf:"bytes,3,rep,name=NestQuorums" json:"NestQuorums,omitempty"`
}

func (m *Quorum) Reset()                    { *m = Quorum{} }
func (m *Quorum) String() string            { return proto.CompactTextString(m) }
func (*Quorum) ProtoMessage()               {}
func (*Quorum) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Quorum) GetThreshold() float64 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *Quorum) GetValidators() string {
	if m != nil {
		return m.Validators
	}
	return ""
}

func (m *Quorum) GetNestQuorums() []*Quorum {
	if m != nil {
		return m.NestQuorums
	}
	return nil
}

// Nomination is used to find a candidate value for
// later federated voting
type Nomination struct {
	VoteList   []string `protobuf:"bytes,1,rep,name=VoteList" json:"VoteList,omitempty"`
	AcceptList []string `protobuf:"bytes,2,rep,name=AcceptList" json:"AcceptList,omitempty"`
	QuorumHash string   `protobuf:"bytes,3,opt,name=QuorumHash" json:"QuorumHash,omitempty"`
}

func (m *Nomination) Reset()                    { *m = Nomination{} }
func (m *Nomination) String() string            { return proto.CompactTextString(m) }
func (*Nomination) ProtoMessage()               {}
func (*Nomination) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Nomination) GetVoteList() []string {
	if m != nil {
		return m.VoteList
	}
	return nil
}

func (m *Nomination) GetAcceptList() []string {
	if m != nil {
		return m.AcceptList
	}
	return nil
}

func (m *Nomination) GetQuorumHash() string {
	if m != nil {
		return m.QuorumHash
	}
	return ""
}

type Statement struct {
	StatementType StatementType `protobuf:"varint,1,opt,name=StatementType,enum=ultpb.StatementType" json:"StatementType,omitempty"`
	NodeID        string        `protobuf:"bytes,2,opt,name=NodeID" json:"NodeID,omitempty"`
	SlotIndex     uint64        `protobuf:"varint,3,opt,name=SlotIndex" json:"SlotIndex,omitempty"`
	Data          []byte        `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Statement) Reset()                    { *m = Statement{} }
func (m *Statement) String() string            { return proto.CompactTextString(m) }
func (*Statement) ProtoMessage()               {}
func (*Statement) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *Statement) GetStatementType() StatementType {
	if m != nil {
		return m.StatementType
	}
	return StatementType_NOMINATE
}

func (m *Statement) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *Statement) GetSlotIndex() uint64 {
	if m != nil {
		return m.SlotIndex
	}
	return 0
}

func (m *Statement) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ConsensusValue)(nil), "ultpb.ConsensusValue")
	proto.RegisterType((*Quorum)(nil), "ultpb.Quorum")
	proto.RegisterType((*Nomination)(nil), "ultpb.Nomination")
	proto.RegisterType((*Statement)(nil), "ultpb.Statement")
	proto.RegisterEnum("ultpb.StatementType", StatementType_name, StatementType_value)
}

func init() { proto.RegisterFile("consensus.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x4f, 0xcb, 0x9b, 0x40,
	0x10, 0xc6, 0xbb, 0x31, 0x4d, 0xe3, 0x98, 0x3f, 0xb2, 0x94, 0x22, 0xa5, 0x14, 0xf1, 0x24, 0x3d,
	0xa4, 0x90, 0xde, 0x7a, 0x93, 0xc4, 0x12, 0x21, 0x31, 0xe9, 0x46, 0x42, 0xe9, 0x6d, 0x13, 0x17,
	0x14, 0xd4, 0x15, 0x77, 0xa5, 0xe9, 0xc7, 0x78, 0xbf, 0xf1, 0x8b, 0x6b, 0x12, 0xcd, 0x7b, 0xdb,
	0xe7, 0xf7, 0x0c, 0x33, 0xcf, 0x0c, 0x0b, 0xf3, 0x0b, 0x2f, 0x04, 0x2b, 0x44, 0x2d, 0x16, 0x65,
	0xc5, 0x25, 0xc7, 0xef, 0xeb, 0x4c, 0x96, 0x67, 0xa7, 0x84, 0xd9, 0xea, 0xee, 0x9c, 0x68, 0x56,
	0x33, 0xfc, 0x15, 0x20, 0xba, 0x6e, 0x53, 0x21, 0x37, 0x54, 0x24, 0x16, 0xb2, 0x91, 0xab, 0x93,
	0x1e, 0xc1, 0x36, 0x18, 0x87, 0x8a, 0x97, 0x5c, 0xb0, 0x28, 0xcd, 0x99, 0x35, 0xb0, 0x91, 0xab,
	0x91, 0x3e, 0xc2, 0x5f, 0x40, 0x5f, 0x65, 0x77, 0x5f, 0x53, 0x7e, 0x07, 0x9c, 0x7f, 0x30, 0xfa,
	0x5d, 0xf3, 0xaa, 0xce, 0x9b, 0xba, 0x28, 0xa9, 0x98, 0x48, 0x78, 0x16, 0xab, 0x41, 0x88, 0x74,
	0xa0, 0xc9, 0x71, 0xa2, 0x59, 0x1a, 0x53, 0xc9, 0x2b, 0xa1, 0xc6, 0xe8, 0xa4, 0x47, 0xf0, 0x77,
	0x30, 0x42, 0x26, 0x64, 0xdb, 0x4b, 0x58, 0x9a, 0xad, 0xb9, 0xc6, 0x72, 0xba, 0x50, 0x6b, 0x2d,
	0x5a, 0x4a, 0xfa, 0x15, 0x4e, 0x02, 0x10, 0xf2, 0x3c, 0x2d, 0xa8, 0x4c, 0x79, 0x81, 0x3f, 0xc3,
	0xf8, 0xc4, 0x25, 0x6b, 0xd6, 0xb2, 0x90, 0xad, 0xb9, 0x3a, 0x79, 0xe8, 0x66, 0xb4, 0x77, 0xb9,
	0xb0, 0x52, 0x2a, 0x77, 0xa0, 0xdc, 0x1e, 0x69, 0xfc, 0xb6, 0xa9, 0x3a, 0x91, 0xd6, 0x46, 0xeb,
	0x88, 0xf3, 0x82, 0x40, 0x3f, 0x4a, 0x2a, 0x59, 0xce, 0x0a, 0x89, 0x7f, 0xc2, 0xf4, 0x21, 0xa2,
	0xff, 0x25, 0x53, 0xab, 0xce, 0x96, 0x1f, 0x6f, 0x51, 0x9f, 0x3c, 0xf2, 0x5c, 0x8a, 0x3f, 0xc1,
	0x28, 0xe4, 0x31, 0x0b, 0xd6, 0xb7, 0x03, 0xdc, 0x54, 0x73, 0xba, 0x63, 0xc6, 0x65, 0x50, 0xc4,
	0xec, 0xaa, 0x02, 0x0c, 0x49, 0x07, 0x30, 0x86, 0xe1, 0x9a, 0x4a, 0x6a, 0x0d, 0x6d, 0xe4, 0x4e,
	0x88, 0x7a, 0x7f, 0xdb, 0xbc, 0x49, 0x81, 0x27, 0x30, 0x0e, 0xf7, 0xbb, 0x20, 0xf4, 0x22, 0xdf,
	0x7c, 0x87, 0x0d, 0xf8, 0x70, 0x20, 0xfe, 0xc1, 0x23, 0xbe, 0x89, 0x1a, 0xb1, 0xda, 0x87, 0xbf,
	0x02, 0xb2, 0x33, 0x07, 0x78, 0x0e, 0x86, 0xff, 0x27, 0xf2, 0x49, 0xe8, 0x6d, 0x83, 0xbf, 0xbe,
	0xa9, 0x9d, 0x47, 0xea, 0x03, 0xfd, 0x78, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xd3, 0x06, 0xcc,
	0x53, 0x02, 0x00, 0x00,
}
