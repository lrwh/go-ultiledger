// Code generated by protoc-gen-go. DO NOT EDIT.
// source: consensus.proto

package ultpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Statement is an abstractive value for nodes to vote
// and reach consensus. Each statement type has its
// corresponding data encoded in pb and saved in Data field.
type StatementType int32

const (
	StatementType_NOMINATE    StatementType = 0
	StatementType_PREPARE     StatementType = 1
	StatementType_CONFIRM     StatementType = 2
	StatementType_EXTERNALIZE StatementType = 3
)

var StatementType_name = map[int32]string{
	0: "NOMINATE",
	1: "PREPARE",
	2: "CONFIRM",
	3: "EXTERNALIZE",
}
var StatementType_value = map[string]int32{
	"NOMINATE":    0,
	"PREPARE":     1,
	"CONFIRM":     2,
	"EXTERNALIZE": 3,
}

func (x StatementType) String() string {
	return proto.EnumName(StatementType_name, int32(x))
}
func (StatementType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// ConsensusValue is used for reaching consensus in
// Federated Byzantine Agreement
type ConsensusValue struct {
	// hash of the transaction list
	TxListHash string `protobuf:"bytes,1,opt,name=TxListHash" json:"TxListHash,omitempty"`
	// propose time
	ProposeTime int64 `protobuf:"varint,2,opt,name=ProposeTime" json:"ProposeTime,omitempty"`
	// close time
	CloseTime int64 `protobuf:"varint,3,opt,name=CloseTime" json:"CloseTime,omitempty"`
}

func (m *ConsensusValue) Reset()                    { *m = ConsensusValue{} }
func (m *ConsensusValue) String() string            { return proto.CompactTextString(m) }
func (*ConsensusValue) ProtoMessage()               {}
func (*ConsensusValue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ConsensusValue) GetTxListHash() string {
	if m != nil {
		return m.TxListHash
	}
	return ""
}

func (m *ConsensusValue) GetProposeTime() int64 {
	if m != nil {
		return m.ProposeTime
	}
	return 0
}

func (m *ConsensusValue) GetCloseTime() int64 {
	if m != nil {
		return m.CloseTime
	}
	return 0
}

// Each ULTNode is associated with a quorum, every message
// related to FBA consensus should contain the quorum of
// the node
type Quorum struct {
	Threshold   float64   `protobuf:"fixed64,1,opt,name=Threshold" json:"Threshold,omitempty"`
	Validators  []string  `protobuf:"bytes,2,rep,name=Validators" json:"Validators,omitempty"`
	NestQuorums []*Quorum `protobuf:"bytes,3,rep,name=NestQuorums" json:"NestQuorums,omitempty"`
}

func (m *Quorum) Reset()                    { *m = Quorum{} }
func (m *Quorum) String() string            { return proto.CompactTextString(m) }
func (*Quorum) ProtoMessage()               {}
func (*Quorum) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Quorum) GetThreshold() float64 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *Quorum) GetValidators() []string {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *Quorum) GetNestQuorums() []*Quorum {
	if m != nil {
		return m.NestQuorums
	}
	return nil
}

// Nominate statement is used to find a candidate value for ballot protocol
type Nominate struct {
	VoteList   []string `protobuf:"bytes,1,rep,name=VoteList" json:"VoteList,omitempty"`
	AcceptList []string `protobuf:"bytes,2,rep,name=AcceptList" json:"AcceptList,omitempty"`
	QuorumHash string   `protobuf:"bytes,3,opt,name=QuorumHash" json:"QuorumHash,omitempty"`
}

func (m *Nominate) Reset()                    { *m = Nominate{} }
func (m *Nominate) String() string            { return proto.CompactTextString(m) }
func (*Nominate) ProtoMessage()               {}
func (*Nominate) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Nominate) GetVoteList() []string {
	if m != nil {
		return m.VoteList
	}
	return nil
}

func (m *Nominate) GetAcceptList() []string {
	if m != nil {
		return m.AcceptList
	}
	return nil
}

func (m *Nominate) GetQuorumHash() string {
	if m != nil {
		return m.QuorumHash
	}
	return ""
}

// Ballot is used to finalize a consensus value for a specific decree
type Ballot struct {
	// ballot counter
	Counter uint32 `protobuf:"varint,1,opt,name=Counter" json:"Counter,omitempty"`
	// composite candidate value
	Value string `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *Ballot) Reset()                    { *m = Ballot{} }
func (m *Ballot) String() string            { return proto.CompactTextString(m) }
func (*Ballot) ProtoMessage()               {}
func (*Ballot) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *Ballot) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *Ballot) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Prepare message for ballot protocol
type Prepare struct {
	// current ballot
	B *Ballot `protobuf:"bytes,1,opt,name=B" json:"B,omitempty"`
	// two hightest ballot accepted as
	// prepared such as Q < P and Q ~ P
	Q *Ballot `protobuf:"bytes,2,opt,name=Q" json:"Q,omitempty"`
	P *Ballot `protobuf:"bytes,3,opt,name=P" json:"P,omitempty"`
	// counter of highest ballot confirmed as prepared
	HC uint32 `protobuf:"varint,4,opt,name=HC" json:"HC,omitempty"`
	// counter of lowest ballot confirmed as prepared
	LC         uint32 `protobuf:"varint,5,opt,name=LC" json:"LC,omitempty"`
	QuorumHash string `protobuf:"bytes,6,opt,name=QuorumHash" json:"QuorumHash,omitempty"`
}

func (m *Prepare) Reset()                    { *m = Prepare{} }
func (m *Prepare) String() string            { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()               {}
func (*Prepare) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *Prepare) GetB() *Ballot {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *Prepare) GetQ() *Ballot {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *Prepare) GetP() *Ballot {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *Prepare) GetHC() uint32 {
	if m != nil {
		return m.HC
	}
	return 0
}

func (m *Prepare) GetLC() uint32 {
	if m != nil {
		return m.LC
	}
	return 0
}

func (m *Prepare) GetQuorumHash() string {
	if m != nil {
		return m.QuorumHash
	}
	return ""
}

// Confirm message for ballot protocol
type Confirm struct {
	// current ballot
	B *Ballot `protobuf:"bytes,1,opt,name=B" json:"B,omitempty"`
	// counter of highest accepted prepared ballot
	PC uint32 `protobuf:"varint,2,opt,name=PC" json:"PC,omitempty"`
	// counter of lowest ballot for which the node has accepted commit
	LC uint32 `protobuf:"varint,3,opt,name=LC" json:"LC,omitempty"`
	// counter of highest ballot for which the node has accepted commit
	HC         uint32 `protobuf:"varint,4,opt,name=HC" json:"HC,omitempty"`
	QuorumHash string `protobuf:"bytes,5,opt,name=QuorumHash" json:"QuorumHash,omitempty"`
}

func (m *Confirm) Reset()                    { *m = Confirm{} }
func (m *Confirm) String() string            { return proto.CompactTextString(m) }
func (*Confirm) ProtoMessage()               {}
func (*Confirm) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *Confirm) GetB() *Ballot {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *Confirm) GetPC() uint32 {
	if m != nil {
		return m.PC
	}
	return 0
}

func (m *Confirm) GetLC() uint32 {
	if m != nil {
		return m.LC
	}
	return 0
}

func (m *Confirm) GetHC() uint32 {
	if m != nil {
		return m.HC
	}
	return 0
}

func (m *Confirm) GetQuorumHash() string {
	if m != nil {
		return m.QuorumHash
	}
	return ""
}

// Externalize message for ballot protocol
type Externalize struct {
	// lowest confirmed committed ballot
	B *Ballot `protobuf:"bytes,1,opt,name=B" json:"B,omitempty"`
	// counter of highest confirmed committed ballot
	HC         uint32 `protobuf:"varint,2,opt,name=HC" json:"HC,omitempty"`
	QuorumHash string `protobuf:"bytes,3,opt,name=QuorumHash" json:"QuorumHash,omitempty"`
}

func (m *Externalize) Reset()                    { *m = Externalize{} }
func (m *Externalize) String() string            { return proto.CompactTextString(m) }
func (*Externalize) ProtoMessage()               {}
func (*Externalize) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *Externalize) GetB() *Ballot {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *Externalize) GetHC() uint32 {
	if m != nil {
		return m.HC
	}
	return 0
}

func (m *Externalize) GetQuorumHash() string {
	if m != nil {
		return m.QuorumHash
	}
	return ""
}

type Statement struct {
	StatementType StatementType `protobuf:"varint,1,opt,name=StatementType,enum=ultpb.StatementType" json:"StatementType,omitempty"`
	// node ID of sender
	NodeID string `protobuf:"bytes,2,opt,name=NodeID" json:"NodeID,omitempty"`
	// decree index
	Index uint64 `protobuf:"varint,3,opt,name=Index" json:"Index,omitempty"`
	// corresponding statement
	//
	// Types that are valid to be assigned to Stmt:
	//	*Statement_Nominate
	//	*Statement_Prepare
	//	*Statement_Confirm
	//	*Statement_Externalize
	Stmt isStatement_Stmt `protobuf_oneof:"Stmt"`
}

func (m *Statement) Reset()                    { *m = Statement{} }
func (m *Statement) String() string            { return proto.CompactTextString(m) }
func (*Statement) ProtoMessage()               {}
func (*Statement) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

type isStatement_Stmt interface {
	isStatement_Stmt()
}

type Statement_Nominate struct {
	Nominate *Nominate `protobuf:"bytes,4,opt,name=Nominate,oneof"`
}
type Statement_Prepare struct {
	Prepare *Prepare `protobuf:"bytes,5,opt,name=Prepare,oneof"`
}
type Statement_Confirm struct {
	Confirm *Confirm `protobuf:"bytes,6,opt,name=Confirm,oneof"`
}
type Statement_Externalize struct {
	Externalize *Externalize `protobuf:"bytes,7,opt,name=Externalize,oneof"`
}

func (*Statement_Nominate) isStatement_Stmt()    {}
func (*Statement_Prepare) isStatement_Stmt()     {}
func (*Statement_Confirm) isStatement_Stmt()     {}
func (*Statement_Externalize) isStatement_Stmt() {}

func (m *Statement) GetStmt() isStatement_Stmt {
	if m != nil {
		return m.Stmt
	}
	return nil
}

func (m *Statement) GetStatementType() StatementType {
	if m != nil {
		return m.StatementType
	}
	return StatementType_NOMINATE
}

func (m *Statement) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *Statement) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Statement) GetNominate() *Nominate {
	if x, ok := m.GetStmt().(*Statement_Nominate); ok {
		return x.Nominate
	}
	return nil
}

func (m *Statement) GetPrepare() *Prepare {
	if x, ok := m.GetStmt().(*Statement_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *Statement) GetConfirm() *Confirm {
	if x, ok := m.GetStmt().(*Statement_Confirm); ok {
		return x.Confirm
	}
	return nil
}

func (m *Statement) GetExternalize() *Externalize {
	if x, ok := m.GetStmt().(*Statement_Externalize); ok {
		return x.Externalize
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Statement) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Statement_OneofMarshaler, _Statement_OneofUnmarshaler, _Statement_OneofSizer, []interface{}{
		(*Statement_Nominate)(nil),
		(*Statement_Prepare)(nil),
		(*Statement_Confirm)(nil),
		(*Statement_Externalize)(nil),
	}
}

func _Statement_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Statement)
	// Stmt
	switch x := m.Stmt.(type) {
	case *Statement_Nominate:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nominate); err != nil {
			return err
		}
	case *Statement_Prepare:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *Statement_Confirm:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Confirm); err != nil {
			return err
		}
	case *Statement_Externalize:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Externalize); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Statement.Stmt has unexpected type %T", x)
	}
	return nil
}

func _Statement_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Statement)
	switch tag {
	case 4: // Stmt.Nominate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Nominate)
		err := b.DecodeMessage(msg)
		m.Stmt = &Statement_Nominate{msg}
		return true, err
	case 5: // Stmt.Prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Prepare)
		err := b.DecodeMessage(msg)
		m.Stmt = &Statement_Prepare{msg}
		return true, err
	case 6: // Stmt.Confirm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Confirm)
		err := b.DecodeMessage(msg)
		m.Stmt = &Statement_Confirm{msg}
		return true, err
	case 7: // Stmt.Externalize
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Externalize)
		err := b.DecodeMessage(msg)
		m.Stmt = &Statement_Externalize{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Statement_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Statement)
	// Stmt
	switch x := m.Stmt.(type) {
	case *Statement_Nominate:
		s := proto.Size(x.Nominate)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Statement_Prepare:
		s := proto.Size(x.Prepare)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Statement_Confirm:
		s := proto.Size(x.Confirm)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Statement_Externalize:
		s := proto.Size(x.Externalize)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ConsensusValue)(nil), "ultpb.ConsensusValue")
	proto.RegisterType((*Quorum)(nil), "ultpb.Quorum")
	proto.RegisterType((*Nominate)(nil), "ultpb.Nominate")
	proto.RegisterType((*Ballot)(nil), "ultpb.Ballot")
	proto.RegisterType((*Prepare)(nil), "ultpb.Prepare")
	proto.RegisterType((*Confirm)(nil), "ultpb.Confirm")
	proto.RegisterType((*Externalize)(nil), "ultpb.Externalize")
	proto.RegisterType((*Statement)(nil), "ultpb.Statement")
	proto.RegisterEnum("ultpb.StatementType", StatementType_name, StatementType_value)
}

func init() { proto.RegisterFile("consensus.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xdb, 0x8a, 0xda, 0x40,
	0x18, 0x36, 0xc9, 0x1a, 0xf5, 0x4f, 0x3d, 0x30, 0x2c, 0x25, 0xb4, 0xa5, 0x88, 0x57, 0x22, 0xd4,
	0x82, 0x85, 0x52, 0x7a, 0xa7, 0x69, 0x4a, 0x04, 0x37, 0x1b, 0x67, 0x83, 0x94, 0xbd, 0xcb, 0xea,
	0x2c, 0x06, 0x92, 0x4c, 0x48, 0x26, 0xad, 0xed, 0xd3, 0xf4, 0x41, 0xfa, 0x70, 0x65, 0x26, 0x27,
	0x35, 0xd0, 0x5e, 0x7e, 0x87, 0xfc, 0xdf, 0x7f, 0x18, 0x02, 0xc3, 0x3d, 0x8d, 0x52, 0x12, 0xa5,
	0x59, 0x3a, 0x8f, 0x13, 0xca, 0x28, 0x6a, 0x67, 0x01, 0x8b, 0x9f, 0x26, 0x31, 0x0c, 0x8c, 0x52,
	0xd9, 0x79, 0x41, 0x46, 0xd0, 0x5b, 0x00, 0xf7, 0xb4, 0xf1, 0x53, 0x66, 0x79, 0xe9, 0x51, 0x97,
	0xc6, 0xd2, 0xb4, 0x87, 0xcf, 0x18, 0x34, 0x06, 0xcd, 0x49, 0x68, 0x4c, 0x53, 0xe2, 0xfa, 0x21,
	0xd1, 0xe5, 0xb1, 0x34, 0x55, 0xf0, 0x39, 0x85, 0xde, 0x40, 0xcf, 0x08, 0x4a, 0x5d, 0x11, 0x7a,
	0x4d, 0x4c, 0x7e, 0x80, 0xba, 0xcd, 0x68, 0x92, 0x85, 0xdc, 0xe7, 0x1e, 0x13, 0x92, 0x1e, 0x69,
	0x70, 0x10, 0x41, 0x12, 0xae, 0x09, 0xde, 0xc7, 0xce, 0x0b, 0xfc, 0x83, 0xc7, 0x68, 0x92, 0xea,
	0xf2, 0x58, 0xe1, 0x7d, 0xd4, 0x0c, 0x7a, 0x0f, 0x9a, 0x4d, 0x52, 0x96, 0xd7, 0x4a, 0x75, 0x65,
	0xac, 0x4c, 0xb5, 0x45, 0x7f, 0x2e, 0xc6, 0x9a, 0xe7, 0x2c, 0x3e, 0x77, 0x4c, 0x9e, 0xa1, 0x6b,
	0xd3, 0xd0, 0x8f, 0x3c, 0x46, 0xd0, 0x2b, 0xe8, 0xee, 0x28, 0x23, 0x7c, 0x28, 0x5d, 0x12, 0xa5,
	0x2b, 0xcc, 0x83, 0x97, 0xfb, 0x3d, 0x89, 0x99, 0x50, 0x8b, 0xe0, 0x9a, 0xe1, 0x7a, 0x5e, 0x52,
	0x2c, 0x48, 0xc9, 0x17, 0x54, 0x33, 0x93, 0x4f, 0xa0, 0xae, 0xbc, 0x20, 0xa0, 0x0c, 0xe9, 0xd0,
	0x31, 0x68, 0x16, 0x31, 0x92, 0x88, 0xf1, 0xfa, 0xb8, 0x84, 0xe8, 0x16, 0xda, 0x62, 0xdb, 0x62,
	0x7d, 0x3d, 0x9c, 0x83, 0xc9, 0x6f, 0x09, 0x3a, 0x4e, 0x42, 0x62, 0x2f, 0x21, 0xe8, 0x35, 0x48,
	0x2b, 0xf1, 0x55, 0x3d, 0x54, 0x5e, 0x15, 0x4b, 0x2b, 0x2e, 0x6e, 0xc5, 0xa7, 0x4d, 0x71, 0xcb,
	0x45, 0x47, 0xb4, 0xd5, 0x14, 0x1d, 0x34, 0x00, 0xd9, 0x32, 0xf4, 0x1b, 0xd1, 0x8d, 0x6c, 0x19,
	0x1c, 0x6f, 0x0c, 0xbd, 0x9d, 0xe3, 0x8d, 0x71, 0x35, 0x9c, 0xda, 0x18, 0xee, 0x3b, 0x1f, 0x29,
	0x7a, 0xf6, 0x93, 0xf0, 0xdf, 0x1d, 0x0e, 0x40, 0x76, 0x0c, 0xd1, 0x62, 0x1f, 0xcb, 0x4e, 0x99,
	0xa3, 0x54, 0x39, 0xd7, 0x7d, 0x5c, 0xe6, 0xb6, 0x1b, 0xb9, 0x8f, 0xa0, 0x99, 0x27, 0x46, 0x92,
	0xc8, 0x0b, 0xfc, 0x5f, 0xe4, 0xbf, 0xd9, 0x56, 0x95, 0xdd, 0xa8, 0xdd, 0x3c, 0xd8, 0x1f, 0x19,
	0x7a, 0x0f, 0xcc, 0x63, 0x24, 0x24, 0x11, 0x43, 0x9f, 0xa1, 0x5f, 0x01, 0xf7, 0x67, 0x4c, 0x44,
	0xcc, 0x60, 0x71, 0x5b, 0xc4, 0x5c, 0x68, 0xf8, 0xd2, 0x8a, 0x5e, 0x82, 0x6a, 0xd3, 0x03, 0x59,
	0x7f, 0x29, 0xee, 0x5a, 0x20, 0x7e, 0xee, 0x75, 0x74, 0x20, 0x27, 0x11, 0x7e, 0x83, 0x73, 0x80,
	0xde, 0xd5, 0x0f, 0x52, 0x6c, 0x42, 0x5b, 0x0c, 0x8b, 0x90, 0x92, 0xb6, 0x5a, 0xb8, 0x7e, 0xb3,
	0xb3, 0xea, 0x71, 0x88, 0xfd, 0x68, 0x8b, 0x41, 0xe1, 0x2e, 0x58, 0xab, 0x85, 0xab, 0xd7, 0x33,
	0xab, 0xce, 0x24, 0x6e, 0x58, 0x7b, 0x0b, 0x96, 0x7b, 0xcb, 0x3b, 0x7e, 0xbc, 0x58, 0xad, 0xde,
	0x11, 0x7e, 0x54, 0xf8, 0xcf, 0x14, 0xab, 0x85, 0xcf, 0x8d, 0x2b, 0x15, 0x6e, 0x1e, 0x58, 0xc8,
	0x66, 0xd6, 0xd5, 0xc2, 0xd0, 0x0b, 0xe8, 0xda, 0xf7, 0x77, 0x6b, 0x7b, 0xe9, 0x9a, 0xa3, 0x16,
	0xd2, 0xa0, 0xe3, 0x60, 0xd3, 0x59, 0x62, 0x73, 0x24, 0x71, 0x60, 0xdc, 0xdb, 0x5f, 0xd7, 0xf8,
	0x6e, 0x24, 0xa3, 0x21, 0x68, 0xe6, 0x37, 0xd7, 0xc4, 0xf6, 0x72, 0xb3, 0x7e, 0x34, 0x47, 0xca,
	0x93, 0x2a, 0x7e, 0x4d, 0x1f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x97, 0xa7, 0x79, 0xad,
	0x04, 0x00, 0x00,
}
