// Code generated by protoc-gen-go. DO NOT EDIT.
// source: consensus.proto

package ultpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Statement_StatementTypeEnum int32

const (
	Statement_NOMINATE    Statement_StatementTypeEnum = 0
	Statement_PREPARE     Statement_StatementTypeEnum = 1
	Statement_CONFIRM     Statement_StatementTypeEnum = 2
	Statement_EXTERNALIZE Statement_StatementTypeEnum = 3
)

var Statement_StatementTypeEnum_name = map[int32]string{
	0: "NOMINATE",
	1: "PREPARE",
	2: "CONFIRM",
	3: "EXTERNALIZE",
}
var Statement_StatementTypeEnum_value = map[string]int32{
	"NOMINATE":    0,
	"PREPARE":     1,
	"CONFIRM":     2,
	"EXTERNALIZE": 3,
}

func (x Statement_StatementTypeEnum) String() string {
	return proto.EnumName(Statement_StatementTypeEnum_name, int32(x))
}
func (Statement_StatementTypeEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{3, 0}
}

// ConsensusValue is used for reaching consensus in
// Federated Byzantine Agreement
type ConsensusValue struct {
	// hash of the transaction list
	TxListHash string `protobuf:"bytes,1,opt,name=TxListHash" json:"TxListHash,omitempty"`
	// propose time
	ProposeTime int64 `protobuf:"varint,2,opt,name=ProposeTime" json:"ProposeTime,omitempty"`
	// close time
	CloseTime int64 `protobuf:"varint,3,opt,name=CloseTime" json:"CloseTime,omitempty"`
}

func (m *ConsensusValue) Reset()                    { *m = ConsensusValue{} }
func (m *ConsensusValue) String() string            { return proto.CompactTextString(m) }
func (*ConsensusValue) ProtoMessage()               {}
func (*ConsensusValue) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ConsensusValue) GetTxListHash() string {
	if m != nil {
		return m.TxListHash
	}
	return ""
}

func (m *ConsensusValue) GetProposeTime() int64 {
	if m != nil {
		return m.ProposeTime
	}
	return 0
}

func (m *ConsensusValue) GetCloseTime() int64 {
	if m != nil {
		return m.CloseTime
	}
	return 0
}

// Each ULTNode is associated with a quorum, every message
// related to FBA consensus should contain the quorum of
// the node
type Quorum struct {
	Threshold   float64   `protobuf:"fixed64,1,opt,name=Threshold" json:"Threshold,omitempty"`
	Validators  string    `protobuf:"bytes,2,opt,name=Validators" json:"Validators,omitempty"`
	NestQuorums []*Quorum `protobuf:"bytes,3,rep,name=NestQuorums" json:"NestQuorums,omitempty"`
}

func (m *Quorum) Reset()                    { *m = Quorum{} }
func (m *Quorum) String() string            { return proto.CompactTextString(m) }
func (*Quorum) ProtoMessage()               {}
func (*Quorum) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Quorum) GetThreshold() float64 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *Quorum) GetValidators() string {
	if m != nil {
		return m.Validators
	}
	return ""
}

func (m *Quorum) GetNestQuorums() []*Quorum {
	if m != nil {
		return m.NestQuorums
	}
	return nil
}

// Nomination is used to find a candidate value for
// later federated voting
type Nomination struct {
	VoteList   []string `protobuf:"bytes,1,rep,name=VoteList" json:"VoteList,omitempty"`
	AcceptList []string `protobuf:"bytes,2,rep,name=AcceptList" json:"AcceptList,omitempty"`
	QuorumHash string   `protobuf:"bytes,3,opt,name=QuorumHash" json:"QuorumHash,omitempty"`
}

func (m *Nomination) Reset()                    { *m = Nomination{} }
func (m *Nomination) String() string            { return proto.CompactTextString(m) }
func (*Nomination) ProtoMessage()               {}
func (*Nomination) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Nomination) GetVoteList() []string {
	if m != nil {
		return m.VoteList
	}
	return nil
}

func (m *Nomination) GetAcceptList() []string {
	if m != nil {
		return m.AcceptList
	}
	return nil
}

func (m *Nomination) GetQuorumHash() string {
	if m != nil {
		return m.QuorumHash
	}
	return ""
}

// Statement is an abstractive value for nodes to vote
// and reach consensus. Each statement type has its
// corresponding data encoded in pb and saved in Data field.
type Statement struct {
	StatementType Statement_StatementTypeEnum `protobuf:"varint,1,opt,name=StatementType,enum=ultpb.Statement_StatementTypeEnum" json:"StatementType,omitempty"`
	NodeID        string                      `protobuf:"bytes,2,opt,name=NodeID" json:"NodeID,omitempty"`
	SlotIndex     uint64                      `protobuf:"varint,3,opt,name=SlotIndex" json:"SlotIndex,omitempty"`
	Data          []byte                      `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Statement) Reset()                    { *m = Statement{} }
func (m *Statement) String() string            { return proto.CompactTextString(m) }
func (*Statement) ProtoMessage()               {}
func (*Statement) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *Statement) GetStatementType() Statement_StatementTypeEnum {
	if m != nil {
		return m.StatementType
	}
	return Statement_NOMINATE
}

func (m *Statement) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *Statement) GetSlotIndex() uint64 {
	if m != nil {
		return m.SlotIndex
	}
	return 0
}

func (m *Statement) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ConsensusValue)(nil), "ultpb.ConsensusValue")
	proto.RegisterType((*Quorum)(nil), "ultpb.Quorum")
	proto.RegisterType((*Nomination)(nil), "ultpb.Nomination")
	proto.RegisterType((*Statement)(nil), "ultpb.Statement")
	proto.RegisterEnum("ultpb.Statement_StatementTypeEnum", Statement_StatementTypeEnum_name, Statement_StatementTypeEnum_value)
}

func init() { proto.RegisterFile("consensus.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xdd, 0xea, 0x9b, 0x40,
	0x10, 0xc5, 0xbb, 0x31, 0x4d, 0xe3, 0x98, 0x0f, 0xbb, 0x17, 0x45, 0x4a, 0x29, 0xe2, 0x95, 0x57,
	0x16, 0xd2, 0x27, 0x90, 0xc4, 0x12, 0x21, 0x31, 0xe9, 0x46, 0x42, 0xe9, 0xdd, 0x26, 0x2e, 0x28,
	0xa8, 0x2b, 0xee, 0x4a, 0xd3, 0x87, 0xee, 0x3b, 0x14, 0xd7, 0x24, 0x1a, 0xfe, 0x77, 0xce, 0xef,
	0x8c, 0x73, 0xce, 0x0c, 0x0b, 0xcb, 0x2b, 0x2f, 0x05, 0x2b, 0x45, 0x23, 0xbc, 0xaa, 0xe6, 0x92,
	0xe3, 0xf7, 0x4d, 0x2e, 0xab, 0x8b, 0x53, 0xc1, 0x62, 0xfd, 0x50, 0xce, 0x34, 0x6f, 0x18, 0xfe,
	0x0a, 0x10, 0xdf, 0x76, 0x99, 0x90, 0x5b, 0x2a, 0x52, 0x0b, 0xd9, 0xc8, 0xd5, 0xc9, 0x80, 0x60,
	0x1b, 0x8c, 0x63, 0xcd, 0x2b, 0x2e, 0x58, 0x9c, 0x15, 0xcc, 0x1a, 0xd9, 0xc8, 0xd5, 0xc8, 0x10,
	0xe1, 0x2f, 0xa0, 0xaf, 0xf3, 0x87, 0xae, 0x29, 0xbd, 0x07, 0xce, 0x1f, 0x98, 0xfc, 0x6c, 0x78,
	0xdd, 0x14, 0x6d, 0x5f, 0x9c, 0xd6, 0x4c, 0xa4, 0x3c, 0x4f, 0x94, 0x11, 0x22, 0x3d, 0x68, 0x73,
	0x9c, 0x69, 0x9e, 0x25, 0x54, 0xf2, 0x5a, 0x28, 0x1b, 0x9d, 0x0c, 0x08, 0xfe, 0x06, 0x46, 0xc4,
	0x84, 0xec, 0x66, 0x09, 0x4b, 0xb3, 0x35, 0xd7, 0x58, 0xcd, 0x3d, 0xb5, 0x96, 0xd7, 0x51, 0x32,
	0xec, 0x70, 0x52, 0x80, 0x88, 0x17, 0x59, 0x49, 0x65, 0xc6, 0x4b, 0xfc, 0x19, 0xa6, 0x67, 0x2e,
	0x59, 0xbb, 0x96, 0x85, 0x6c, 0xcd, 0xd5, 0xc9, 0xb3, 0x6e, 0xad, 0xfd, 0xeb, 0x95, 0x55, 0x52,
	0xa9, 0x23, 0xa5, 0x0e, 0x48, 0xab, 0x77, 0x43, 0xd5, 0x89, 0xb4, 0x2e, 0x5a, 0x4f, 0x9c, 0x7f,
	0x08, 0xf4, 0x93, 0xa4, 0x92, 0x15, 0xac, 0x94, 0x78, 0x0b, 0xf3, 0x67, 0x11, 0xff, 0xad, 0x98,
	0x5a, 0x75, 0xb1, 0x72, 0xee, 0x51, 0x9f, 0x9a, 0xf7, 0xd2, 0x15, 0x94, 0x4d, 0x41, 0x5e, 0x7f,
	0xc4, 0x9f, 0x60, 0x12, 0xf1, 0x84, 0x85, 0x9b, 0xfb, 0x39, 0xee, 0x55, 0x7b, 0xc8, 0x53, 0xce,
	0x65, 0x58, 0x26, 0xec, 0xa6, 0xe2, 0x8c, 0x49, 0x0f, 0x30, 0x86, 0xf1, 0x86, 0x4a, 0x6a, 0x8d,
	0x6d, 0xe4, 0xce, 0x88, 0xfa, 0x76, 0x76, 0xf0, 0xf1, 0x8d, 0x1b, 0x9e, 0xc1, 0x34, 0x3a, 0xec,
	0xc3, 0xc8, 0x8f, 0x03, 0xf3, 0x1d, 0x36, 0xe0, 0xc3, 0x91, 0x04, 0x47, 0x9f, 0x04, 0x26, 0x6a,
	0x8b, 0xf5, 0x21, 0xfa, 0x11, 0x92, 0xbd, 0x39, 0xc2, 0x4b, 0x30, 0x82, 0x5f, 0x71, 0x40, 0x22,
	0x7f, 0x17, 0xfe, 0x0e, 0x4c, 0xed, 0x32, 0x51, 0x4f, 0xea, 0xfb, 0xff, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xbd, 0xe8, 0x65, 0x6e, 0x65, 0x02, 0x00, 0x00,
}
