syntax = "proto3";

package ultpb;

import "asset.proto";
import "offer.proto";

// Every operation is related to a specific account and 
// each transaction could contain one or more operations.
enum OpType {
  CREATE_ACCOUNT = 0;
  PAYMENT = 1;
  PATH_PAYMENT = 2;
  TRUST = 3;
}

// Operation is the concrete way to mutate a account.
message Op {
  OpType OpType = 1;
  oneof Op {
    CreateAccountOp CreateAccount = 2;
    PaymentOp Payment = 3;
    PathPaymentOp PathPayment = 4;
    TrustOp Trust = 5;
  }
}

// Tx is the abstraction of the concrete actions
// that the node will execute.
message Tx {
  // The source account for the transaction.
  string AccountID = 1;
  // Fee of the transaction that the source account wishes to pay.
  int64 Fee = 2;
  // Extra note about the transaction.
  string Note = 3;
  // Unique transaction sequence number, the number is used for
  // distinguishing transactions initiated from the same source
  // account. The number should be larger than the latest sequence
  // number of the confirmed transactions belong to the source account.
  uint64 SeqNum = 4;
  // List of operations.
  repeated Op OpList = 5;
}

// TxSet is the container of a number of transactions that are waiting
// to be confirmed in consensus by the Ultiledger network.
message TxSet {
  // Hash of previous closed ledger header.
  string PrevLedgerHash = 1;
  // List of transactions.
  repeated Tx TxList = 2;  
}

// CreateAccountOp creates a new account by sending some native
// asset to it from the source account.
message CreateAccountOp {
  // Destination account.
  string AccountID = 1;
  // Initial balance in ULU.
  int64 Balance = 2;
}

// PaymentOp creates an peer-to-peer payment from the source account
// to the destination account in specified asset type.
message PaymentOp {
  // Destination account of the payment.
  string AccountID = 1;
  // Asset type of payment.
  Asset Asset = 2;
  // The amount of payment in specified asset type.
  int64 Amount = 3;
}

// PathPaymentOp creates an peer-to-peer payment which could use multiple
// hops of asset exchanges to reach the deal by utilizing an intelligent
// asset exchanges path.
message PathPaymentOp {
  // Source asset to send.
  Asset SrcAsset = 1;
  // The amount of source asset to send.
  int64 SrcAmount = 2;
  // Destination account of the path payment.
  string AccountID = 3; 
  // Destination asset type.   
  Asset DstAsset = 4;
  // Payment asset path.
  repeated Asset Path = 5;
}

// TrustOp creates a trustline for the source account to trust a custom
// asset issued by other account.
message TrustOp {
  // Asset to trust.
  Asset Asset = 2;
  // Limit of the trustline.
  int64 Limit = 3;
}

// AllowTrustOp creates an op to manage the authorization of the custom asset.
message AllowTrustOp {
  // The account id of trustor.
  string AccountID = 1;
  // Asset to trust.
  Asset Asset = 2;
  // Authorization flag.
  int32 Authorized = 3;  
}

// OfferOp creates an asset exchange offer to exchange specified asset pairs.
message OfferOp {
  // Asset for selling.
  Asset SellingAsset = 1;
  // Asset for buying.
  Asset BuyingAsset = 2;
  // The amount of asset for selling.
  int64 Amount = 3;
  // The price of selling asset in terms of buying asset in fractional format.
  // For instance, if the price = 3/4, then it means the price of one selling
  // asset is 3/4 buying asset.
  Price Price = 4;
  // ID of this offer, this field is empty for an new offer.
  string OfferID = 5;
  // Whether the offer is passive.
  int32 Passive = 6;
}
