syntax = "proto3";

package ultpb;

import "asset.proto";
import "offer.proto";

// Every operation is related to a specific account and 
// each transaction could contain one or more operations
enum OpType {
  CREATE_ACCOUNT = 0;
  PAYMENT = 1;
  PATH_PAYMENT = 2;
}

// Operation
message Op {
  // operation type of this transaction
  OpType OpType = 1;
  // defacto operation
  oneof Op {
    CreateAccountOp CreateAccount = 2;
    PaymentOp Payment = 3;
    PathPaymentOp PathPayment = 4;
  }
}

// Transaction
message Tx {
  // the source account for sending asset to the new account
  string AccountID = 1;
  // fee to pay
  int64 Fee = 2;
  // extra note about the transaction
  string Note = 3;
  // unique transaction sequence number
  uint64 SequenceNumber = 4;
  // list of operations
  repeated Op OpList = 5;
}

// Transaction set for consensus
message TxSet {
  // hash of previous closed ledger header
  string PrevLedgerHash = 1;
  // list of transaction hashes
  repeated Tx TxList = 2;  
}

// Create a new account by sending asset to it
message CreateAccountOp {
  // destination account
  string AccountID = 1;
  // initial balance in ULUs
  int64 Balance = 2;
}

// Peer to peer payment
message PaymentOp {
  // destination account of the payment
  string AccountID = 1;
  // asset type of payment
  Asset Asset = 2;
  // amount of payment in specified asset type
  int64 Amount = 3;
}

// Path payment
message PathPaymentOp {
  // source asset to send
  Asset SrcAsset = 1;
  // amount of source asset to send
  int64 SrcAmount = 2;
  // destination account of the path payment
  string AccountID = 3; 
  // destination asset type   
  Asset DstAsset = 4;
  // payment asset path
  repeated Asset Path = 5;
}

// Trust management
message TrustOp {
  // asset for trust
  Asset Asset = 2;
  // limit of trust
  int64 Limit = 3;
}

// Trust authorization management
message AllowTrustOp {
  // accountID of trustor
  string AccountID = 1;
  // asset of trust
  Asset Asset = 2;
  // authorization flag
  int32 Authorized = 3;  
}

// Offer management
message OfferOp {
  // asset for selling
  Asset SellingAsset = 1;
  // asset for buying
  Asset BuyingAsset = 2;
  // amount of asset for selling
  int64 Amount = 3;
  // price in fractional format
  Price Price = 4;
  // ID of this offer
  string OfferID = 5;
  // whether the offer is passive
  int32 Passive = 6;
}
