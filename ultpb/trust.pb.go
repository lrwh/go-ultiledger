// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trust.proto

package ultpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Trust struct {
	// Owner of this trust.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID" json:"AccountID,omitempty"`
	// Trusted asset.
	Asset *Asset `protobuf:"bytes,2,opt,name=Asset" json:"Asset,omitempty"`
	// Balance of the trusted asset.
	Balance int64 `protobuf:"varint,3,opt,name=Balance" json:"Balance,omitempty"`
	// Upper limit the balance of the trusted asset.
	Limit int64 `protobuf:"varint,4,opt,name=Limit" json:"Limit,omitempty"`
	// Liability of the trusted asset.
	Liability *Liability `protobuf:"bytes,5,opt,name=Liability" json:"Liability,omitempty"`
	// Whether the trust if authorized.
	Authorized int32 `protobuf:"varint,6,opt,name=Authorized" json:"Authorized,omitempty"`
}

func (m *Trust) Reset()                    { *m = Trust{} }
func (m *Trust) String() string            { return proto.CompactTextString(m) }
func (*Trust) ProtoMessage()               {}
func (*Trust) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *Trust) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *Trust) GetAsset() *Asset {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *Trust) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Trust) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Trust) GetLiability() *Liability {
	if m != nil {
		return m.Liability
	}
	return nil
}

func (m *Trust) GetAuthorized() int32 {
	if m != nil {
		return m.Authorized
	}
	return 0
}

func init() {
	proto.RegisterType((*Trust)(nil), "ultpb.Trust")
}

func init() { proto.RegisterFile("trust.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x29, 0x2a, 0x2d,
	0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xcd, 0x29, 0x29, 0x48, 0x92, 0xe2,
	0x4e, 0x2c, 0x2e, 0x4e, 0x85, 0x8a, 0x49, 0xf1, 0xe7, 0x64, 0x26, 0x26, 0x65, 0xe6, 0x64, 0x96,
	0x54, 0x42, 0x04, 0x94, 0x4e, 0x32, 0x72, 0xb1, 0x86, 0x80, 0x34, 0x09, 0xc9, 0x70, 0x71, 0x3a,
	0x26, 0x27, 0xe7, 0x97, 0xe6, 0x95, 0x78, 0xba, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x21,
	0x04, 0x84, 0x94, 0xb8, 0x58, 0x1d, 0x41, 0xe6, 0x48, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x1b, 0xf1,
	0xe8, 0x81, 0x0d, 0xd7, 0x03, 0x8b, 0x05, 0x41, 0xa4, 0x84, 0x24, 0xb8, 0xd8, 0x9d, 0x12, 0x73,
	0x12, 0xf3, 0x92, 0x53, 0x25, 0x98, 0x15, 0x18, 0x35, 0x98, 0x83, 0x60, 0x5c, 0x21, 0x11, 0x2e,
	0x56, 0x9f, 0xcc, 0xdc, 0xcc, 0x12, 0x09, 0x16, 0xb0, 0x38, 0x84, 0x23, 0xa4, 0xc7, 0xc5, 0xe9,
	0x03, 0x73, 0x8e, 0x04, 0x2b, 0xd8, 0x5c, 0x01, 0xa8, 0xb9, 0x70, 0xf1, 0x20, 0x84, 0x12, 0x21,
	0x39, 0x2e, 0x2e, 0xc7, 0xd2, 0x92, 0x8c, 0xfc, 0xa2, 0xcc, 0xaa, 0xd4, 0x14, 0x09, 0x36, 0x05,
	0x46, 0x0d, 0xd6, 0x20, 0x24, 0x91, 0x24, 0x36, 0xb0, 0x97, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x07, 0xe0, 0xc1, 0x5f, 0x06, 0x01, 0x00, 0x00,
}
