// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trust.proto

package ultpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Trust struct {
	// owner of this trust
	AccountID string `protobuf:"bytes,1,opt,name=AccountID" json:"AccountID,omitempty"`
	// trusted asset
	Asset *Asset `protobuf:"bytes,2,opt,name=Asset" json:"Asset,omitempty"`
	// balance of the asset
	Balance uint64 `protobuf:"varint,3,opt,name=Balance" json:"Balance,omitempty"`
	// upper limit the balance
	Limit uint64 `protobuf:"varint,4,opt,name=Limit" json:"Limit,omitempty"`
	// trust authorized or not
	Authorized uint32 `protobuf:"varint,5,opt,name=Authorized" json:"Authorized,omitempty"`
}

func (m *Trust) Reset()                    { *m = Trust{} }
func (m *Trust) String() string            { return proto.CompactTextString(m) }
func (*Trust) ProtoMessage()               {}
func (*Trust) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Trust) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *Trust) GetAsset() *Asset {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *Trust) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Trust) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Trust) GetAuthorized() uint32 {
	if m != nil {
		return m.Authorized
	}
	return 0
}

func init() {
	proto.RegisterType((*Trust)(nil), "ultpb.Trust")
}

func init() { proto.RegisterFile("trust.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x29, 0x2a, 0x2d,
	0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xcd, 0x29, 0x29, 0x48, 0x92, 0xe2,
	0x4e, 0x2c, 0x2e, 0x4e, 0x85, 0x8a, 0x29, 0xcd, 0x64, 0xe4, 0x62, 0x0d, 0x01, 0xa9, 0x11, 0x92,
	0xe1, 0xe2, 0x74, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0xf1, 0x74, 0x91, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x42, 0x08, 0x08, 0x29, 0x71, 0xb1, 0x3a, 0x82, 0xb4, 0x49, 0x30, 0x29, 0x30, 0x6a,
	0x70, 0x1b, 0xf1, 0xe8, 0x81, 0xcd, 0xd2, 0x03, 0x8b, 0x05, 0x41, 0xa4, 0x84, 0x24, 0xb8, 0xd8,
	0x9d, 0x12, 0x73, 0x12, 0xf3, 0x92, 0x53, 0x25, 0x98, 0x15, 0x18, 0x35, 0x58, 0x82, 0x60, 0x5c,
	0x21, 0x11, 0x2e, 0x56, 0x9f, 0xcc, 0xdc, 0xcc, 0x12, 0x09, 0x16, 0xb0, 0x38, 0x84, 0x23, 0x24,
	0xc7, 0xc5, 0xe5, 0x58, 0x5a, 0x92, 0x91, 0x5f, 0x94, 0x59, 0x95, 0x9a, 0x22, 0xc1, 0xaa, 0xc0,
	0xa8, 0xc1, 0x1b, 0x84, 0x24, 0x92, 0xc4, 0x06, 0x76, 0xa2, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0xc3, 0xba, 0x63, 0xb7, 0xc5, 0x00, 0x00, 0x00,
}
