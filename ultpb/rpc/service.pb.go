// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	HealthCheckRequest
	HealthCheckResponse
	SubmitTransactionRequest
	SubmitTransactionResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TransactionStatusEnum int32

const (
	TransactionStatusEnum_REJECTED  TransactionStatusEnum = 0
	TransactionStatusEnum_ACCEPTED  TransactionStatusEnum = 1
	TransactionStatusEnum_CONFIRMED TransactionStatusEnum = 2
)

var TransactionStatusEnum_name = map[int32]string{
	0: "REJECTED",
	1: "ACCEPTED",
	2: "CONFIRMED",
}
var TransactionStatusEnum_value = map[string]int32{
	"REJECTED":  0,
	"ACCEPTED":  1,
	"CONFIRMED": 2,
}

func (x TransactionStatusEnum) String() string {
	return proto.EnumName(TransactionStatusEnum_name, int32(x))
}
func (TransactionStatusEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HealthCheckRequest struct {
	IP     string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=NodeID" json:"NodeID,omitempty"`
}

func (m *HealthCheckRequest) Reset()                    { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()               {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HealthCheckRequest) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *HealthCheckRequest) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type HealthCheckResponse struct {
	IP     string `protobuf:"bytes,1,opt,name=IP" json:"IP,omitempty"`
	NodeID string `protobuf:"bytes,2,opt,name=NodeID" json:"NodeID,omitempty"`
}

func (m *HealthCheckResponse) Reset()                    { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()               {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HealthCheckResponse) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *HealthCheckResponse) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

type SubmitTransactionRequest struct {
	// transaction data in pb format
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	// digital signature of the data signed by
	// the source account private key
	Signature string `protobuf:"bytes,2,opt,name=Signature" json:"Signature,omitempty"`
}

func (m *SubmitTransactionRequest) Reset()                    { *m = SubmitTransactionRequest{} }
func (m *SubmitTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitTransactionRequest) ProtoMessage()               {}
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SubmitTransactionRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SubmitTransactionRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type SubmitTransactionResponse struct {
	TransactionStatus TransactionStatusEnum `protobuf:"varint,1,opt,name=TransactionStatus,enum=rpc.TransactionStatusEnum" json:"TransactionStatus,omitempty"`
	// the transaction hash is only valid when the response
	// status is ACCEPTED or CONFIRMED
	TransactionHash string `protobuf:"bytes,2,opt,name=TransactionHash" json:"TransactionHash,omitempty"`
	// error message for REJECTED transaction
	ErrorMessage string `protobuf:"bytes,3,opt,name=ErrorMessage" json:"ErrorMessage,omitempty"`
}

func (m *SubmitTransactionResponse) Reset()                    { *m = SubmitTransactionResponse{} }
func (m *SubmitTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SubmitTransactionResponse) ProtoMessage()               {}
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubmitTransactionResponse) GetTransactionStatus() TransactionStatusEnum {
	if m != nil {
		return m.TransactionStatus
	}
	return TransactionStatusEnum_REJECTED
}

func (m *SubmitTransactionResponse) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *SubmitTransactionResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*HealthCheckRequest)(nil), "rpc.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "rpc.HealthCheckResponse")
	proto.RegisterType((*SubmitTransactionRequest)(nil), "rpc.SubmitTransactionRequest")
	proto.RegisterType((*SubmitTransactionResponse)(nil), "rpc.SubmitTransactionResponse")
	proto.RegisterEnum("rpc.TransactionStatusEnum", TransactionStatusEnum_name, TransactionStatusEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ULTNode service

type ULTNodeClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error)
}

type uLTNodeClient struct {
	cc *grpc.ClientConn
}

func NewULTNodeClient(cc *grpc.ClientConn) ULTNodeClient {
	return &uLTNodeClient{cc}
}

func (c *uLTNodeClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := grpc.Invoke(ctx, "/rpc.ULTNode/HealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uLTNodeClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error) {
	out := new(SubmitTransactionResponse)
	err := grpc.Invoke(ctx, "/rpc.ULTNode/SubmitTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ULTNode service

type ULTNodeServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error)
}

func RegisterULTNodeServer(s *grpc.Server, srv ULTNodeServer) {
	s.RegisterService(&_ULTNode_serviceDesc, srv)
}

func _ULTNode_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ULTNodeServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ULTNode/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ULTNodeServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ULTNode_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ULTNodeServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ULTNode/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ULTNodeServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ULTNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ULTNode",
	HandlerType: (*ULTNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ULTNode_HealthCheck_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _ULTNode_SubmitTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4e, 0xfa, 0x40,
	0x10, 0xc6, 0x69, 0xf9, 0x87, 0xbf, 0x8c, 0x80, 0x30, 0x46, 0xad, 0x44, 0x8d, 0xe9, 0x89, 0x78,
	0xe0, 0x80, 0x57, 0x3d, 0x48, 0xbb, 0x86, 0x1a, 0x40, 0x52, 0xea, 0x03, 0x2c, 0x75, 0x03, 0x8d,
	0xd2, 0xad, 0xbb, 0x5b, 0x5f, 0xc8, 0x47, 0xf0, 0x05, 0x0d, 0x6b, 0x89, 0xc5, 0x42, 0xe2, 0xad,
	0xf3, 0x9b, 0x7e, 0xdf, 0xce, 0xce, 0xb7, 0x50, 0x97, 0x4c, 0xbc, 0x47, 0x21, 0xeb, 0x26, 0x82,
	0x2b, 0x8e, 0x65, 0x91, 0x84, 0xf6, 0x0d, 0xe0, 0x80, 0xd1, 0x57, 0xb5, 0x70, 0x16, 0x2c, 0x7c,
	0xf1, 0xd9, 0x5b, 0xca, 0xa4, 0xc2, 0x06, 0x98, 0xde, 0xc4, 0x32, 0x2e, 0x8d, 0x4e, 0xd5, 0x37,
	0xbd, 0x09, 0x1e, 0x43, 0x65, 0xcc, 0x9f, 0x99, 0xe7, 0x5a, 0xa6, 0x66, 0x59, 0x65, 0xdf, 0xc2,
	0xe1, 0x86, 0x5a, 0x26, 0x3c, 0x96, 0xec, 0xcf, 0xf2, 0x21, 0x58, 0xd3, 0x74, 0xb6, 0x8c, 0x54,
	0x20, 0x68, 0x2c, 0x69, 0xa8, 0x22, 0x1e, 0xaf, 0x47, 0x40, 0xf8, 0xe7, 0x52, 0x45, 0xb5, 0x4b,
	0xcd, 0xd7, 0xdf, 0x78, 0x06, 0xd5, 0x69, 0x34, 0x8f, 0xa9, 0x4a, 0x05, 0xcb, 0xac, 0x7e, 0x80,
	0xfd, 0x69, 0xc0, 0xe9, 0x16, 0xbb, 0x6c, 0xa6, 0x01, 0xb4, 0x72, 0x78, 0xaa, 0xa8, 0x4a, 0xa5,
	0x36, 0x6f, 0xf4, 0xda, 0x5d, 0x91, 0x84, 0xdd, 0x42, 0x97, 0xc4, 0xe9, 0xd2, 0x2f, 0x8a, 0xb0,
	0x03, 0x07, 0x39, 0x38, 0xa0, 0x72, 0x91, 0xcd, 0xf2, 0x1b, 0xa3, 0x0d, 0x35, 0x22, 0x04, 0x17,
	0x23, 0x26, 0x25, 0x9d, 0x33, 0xab, 0xac, 0x7f, 0xdb, 0x60, 0x57, 0x7d, 0x38, 0xda, 0x7a, 0x32,
	0xd6, 0x60, 0xcf, 0x27, 0x0f, 0xc4, 0x09, 0x88, 0xdb, 0x2c, 0xad, 0xaa, 0x3b, 0xc7, 0x21, 0x93,
	0x55, 0x65, 0x60, 0x1d, 0xaa, 0xce, 0xe3, 0xf8, 0xde, 0xf3, 0x47, 0xc4, 0x6d, 0x9a, 0xbd, 0x0f,
	0x03, 0xfe, 0x3f, 0x0d, 0x83, 0xd5, 0x56, 0xb1, 0x0f, 0xfb, 0xb9, 0x48, 0xf0, 0x44, 0xdf, 0xad,
	0x18, 0x71, 0xdb, 0x2a, 0x36, 0xbe, 0x37, 0x65, 0x97, 0x30, 0x80, 0x56, 0x61, 0x91, 0x78, 0xae,
	0x05, 0xbb, 0xf2, 0x6a, 0x5f, 0xec, 0x6a, 0xaf, 0x5d, 0x67, 0x15, 0xfd, 0xec, 0xae, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xb4, 0x11, 0x1b, 0xf1, 0x87, 0x02, 0x00, 0x00,
}
