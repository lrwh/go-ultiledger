syntax = "proto3";

package ultpb;

// ConsensusValue is used for reaching consensus in 
// Federated Byzantine Agreement
message ConsensusValue {
  // hash of the transaction list
  string TxListHash = 1;
  // propose time
  int64 ProposeTime = 2;
  // close time
  int64 CloseTime = 3;
}

// Each ULTNode is associated with a quorum, every message
// related to FBA consensus should contain the quorum of 
// the node
message Quorum {
  double Threshold = 1;
  repeated string Validators = 2;
  repeated Quorum NestQuorums = 3;
}

// Nominate statement is used to find a candidate value for ballot protocol
message Nominate {
  repeated string VoteList = 1;
  repeated string AcceptList = 2;
  string QuorumHash = 3;
}

// Ballot is used to finalize a consensus value for a specific decree
message Ballot {
  // ballot counter
  uint32 Counter = 1;
  // composite candidate value
  string Value = 2;
}

// Prepare message for ballot protocol
message Prepare {
  // current ballot
  Ballot B = 1;
  // two hightest ballot accepted as 
  // prepared such as Q < P and Q ~ P
  Ballot Q = 2;
  Ballot P = 3;
  // counter of highest ballot confirmed as prepared
  uint32 HC = 4;
  // counter of lowest ballot confirmed as prepared
  uint32 LC = 5;
  string QuorumHash = 6;
}

// Confirm message for ballot protocol
message Confirm {
  // current ballot
  Ballot B = 1;
  // counter of highest accepted prepared ballot
  uint32 PC = 2;
  // counter of lowest ballot for which the node has accepted commit
  uint32 LC = 3; 
  // counter of highest ballot for which the node has accepted commit
  uint32 HC = 4;
  string QuorumHash = 5; 
}

// Externalize message for ballot protocol
message Externalize {
  // lowest confirmed committed ballot
  Ballot B = 1;
  // counter of highest confirmed committed ballot
  uint32 HC = 2;
  string QuorumHash = 3;
}

// Statement is an abstractive value for nodes to vote 
// and reach consensus. Each statement type has its 
// corresponding data encoded in pb and saved in Data field.
enum StatementType {
  NOMINATE = 0;
  PREPARE = 1;
  CONFIRM = 2;
  EXTERNALIZE = 3;
}

message Statement {
  StatementType StatementType = 1;
  // node ID of sender
  string NodeID = 2;
  // decree index
  uint64 Index = 3;
  // corresponding statement
  oneof Stmt {
    Nominate Nominate = 4;
    Prepare Prepare = 5;
    Confirm Confirm = 6;
    Externalize Externalize = 7; 
  }
}
