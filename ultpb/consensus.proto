syntax = "proto3";

package ultpb;

// ConsensusValue is used for reaching consensus in FBA. 
message ConsensusValue {
  // Hash of the transaction set.
  string TxSetHash = 1;
  // Propose time of the consensus value.
  int64 ProposeTime = 2;
  // Close time of the consensus value.
  int64 CloseTime = 3;
}

// Each ULTNode is associated with a quorum, every message
// related to FBA consensus should contain the quorum of 
// the node.
message Quorum {
  // We choose the threshold to be a floatint point number instead of
  // an integer to maintain a more conservative and safer 
  // requirement of the quorum. For instance, if the threshold
  // is 0.6 and the number of validators is 7, the required number
  // of nodes needed to pass a decision would be 4.2 in floating point,
  // and we take the ceiling of the number to be the final required
  // integer threshold which is 5. As a result the requirement
  // is sticter than that to set the threshold to 4 in integer form.
  double Threshold = 1;
  repeated string Validators = 2;
  repeated Quorum NestQuorums = 3;
}

// Nominate statement is used to find a candidate value for a specific decree.
message Nominate {
  repeated string VoteList = 1;
  repeated string AcceptList = 2;
  string QuorumHash = 3;
}

// Ballot is used to finalize a consensus value for a specific decree.
message Ballot {
  // Ballot counter.
  uint32 Counter = 1;
  // Composite candidate value.
  string Value = 2;
}

// Prepare message for ballot protocol.
message Prepare {
  // Current working ballot.
  Ballot B = 1;
  // Two hightest ballots accepted as 
  // prepared such as Q < P and Q ~ P.
  Ballot Q = 2;
  Ballot P = 3;
  // Counter of highest ballot confirmed as prepared.
  uint32 HC = 4;
  // Counter of lowest ballot confirmed as prepared.
  uint32 LC = 5;
  string QuorumHash = 6;
}

// Confirm message for ballot protocol.
message Confirm {
  // Current working ballot.
  Ballot B = 1;
  // Counter of the highest ballot accepted as prepared. 
  uint32 PC = 2;
  // Counter of the lowest ballot accepted as committed.
  uint32 LC = 3; 
  // Counter of the highest ballot accepted as committed.
  uint32 HC = 4;
  string QuorumHash = 5; 
}

// Externalize message for ballot protocol.
message Externalize {
  // Lowest ballot confirmed as committed. 
  Ballot B = 1;
  // Counter of the highest ballot accepted as committed.
  uint32 HC = 2;
  string QuorumHash = 3;
}

// Statement is an abstractive value for nodes to vote 
// and reach consensus. Each statement type has its 
// corresponding data encoded in pb and saved in Data field.
enum StatementType {
  NOMINATE = 0;
  PREPARE = 1;
  CONFIRM = 2;
  EXTERNALIZE = 3;
}

message Statement {
  StatementType StatementType = 1;
  // Node ID of source node.
  string NodeID = 2;
  // Decree index.
  uint64 Index = 3;
  oneof Stmt {
    Nominate Nominate = 4;
    Prepare Prepare = 5;
    Confirm Confirm = 6;
    Externalize Externalize = 7; 
  }
}
