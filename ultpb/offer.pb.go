// Code generated by protoc-gen-go. DO NOT EDIT.
// source: offer.proto

package ultpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Price struct {
	Numerator   uint64 `protobuf:"varint,1,opt,name=Numerator" json:"Numerator,omitempty"`
	Denominator uint64 `protobuf:"varint,2,opt,name=Denominator" json:"Denominator,omitempty"`
}

func (m *Price) Reset()                    { *m = Price{} }
func (m *Price) String() string            { return proto.CompactTextString(m) }
func (*Price) ProtoMessage()               {}
func (*Price) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Price) GetNumerator() uint64 {
	if m != nil {
		return m.Numerator
	}
	return 0
}

func (m *Price) GetDenominator() uint64 {
	if m != nil {
		return m.Denominator
	}
	return 0
}

type Offer struct {
	// seller of the offer
	AccountID string `protobuf:"bytes,1,opt,name=AccountID" json:"AccountID,omitempty"`
	// ID of the offer
	OfferID uint64 `protobuf:"varint,2,opt,name=OfferID" json:"OfferID,omitempty"`
	// asset for selling
	SellingAsset *Asset `protobuf:"bytes,3,opt,name=SellingAsset" json:"SellingAsset,omitempty"`
	// asset for buying
	BuyingAsset *Asset `protobuf:"bytes,4,opt,name=BuyingAsset" json:"BuyingAsset,omitempty"`
	// amount of asset for selling
	Amount uint64 `protobuf:"varint,5,opt,name=Amount" json:"Amount,omitempty"`
	// price of the offer
	Price *Price `protobuf:"bytes,6,opt,name=Price" json:"Price,omitempty"`
	// passive offer?
	Passive uint32 `protobuf:"varint,7,opt,name=Passive" json:"Passive,omitempty"`
}

func (m *Offer) Reset()                    { *m = Offer{} }
func (m *Offer) String() string            { return proto.CompactTextString(m) }
func (*Offer) ProtoMessage()               {}
func (*Offer) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *Offer) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *Offer) GetOfferID() uint64 {
	if m != nil {
		return m.OfferID
	}
	return 0
}

func (m *Offer) GetSellingAsset() *Asset {
	if m != nil {
		return m.SellingAsset
	}
	return nil
}

func (m *Offer) GetBuyingAsset() *Asset {
	if m != nil {
		return m.BuyingAsset
	}
	return nil
}

func (m *Offer) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Offer) GetPrice() *Price {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *Offer) GetPassive() uint32 {
	if m != nil {
		return m.Passive
	}
	return 0
}

func init() {
	proto.RegisterType((*Price)(nil), "ultpb.Price")
	proto.RegisterType((*Offer)(nil), "ultpb.Offer")
}

func init() { proto.RegisterFile("offer.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x59, 0x6d, 0x12, 0x3a, 0x5b, 0x2f, 0x73, 0x90, 0x45, 0x3c, 0x84, 0x9c, 0x72, 0x0a,
	0xa2, 0x9f, 0x20, 0x12, 0x90, 0x5e, 0xb4, 0xac, 0x9f, 0x20, 0x0d, 0x5b, 0x09, 0x24, 0xbb, 0x65,
	0xff, 0x08, 0x7e, 0x72, 0xaf, 0xb2, 0xe3, 0xd6, 0x36, 0xe0, 0x71, 0x7e, 0xf3, 0xe6, 0xcd, 0xe3,
	0x01, 0x37, 0x87, 0x83, 0xb2, 0xcd, 0xd1, 0x1a, 0x6f, 0x30, 0x0b, 0x93, 0x3f, 0xee, 0xef, 0x78,
	0xef, 0x9c, 0xf2, 0xbf, 0xac, 0x7a, 0x81, 0x6c, 0x67, 0xc7, 0x41, 0xe1, 0x3d, 0xac, 0x5f, 0xc3,
	0xac, 0x6c, 0xef, 0x8d, 0x15, 0xac, 0x64, 0xf5, 0x4a, 0x9e, 0x01, 0x96, 0xc0, 0x3b, 0xa5, 0xcd,
	0x3c, 0x6a, 0xda, 0x5f, 0xd1, 0xfe, 0x12, 0x55, 0xdf, 0x0c, 0xb2, 0xb7, 0xf8, 0x2c, 0x3a, 0xb5,
	0xc3, 0x60, 0x82, 0xf6, 0xdb, 0x8e, 0x9c, 0xd6, 0xf2, 0x0c, 0x50, 0x40, 0x41, 0xb2, 0x6d, 0x97,
	0x5c, 0x4e, 0x23, 0x3e, 0xc0, 0xe6, 0x5d, 0x4d, 0xd3, 0xa8, 0x3f, 0xda, 0x18, 0x50, 0x5c, 0x97,
	0xac, 0xe6, 0x8f, 0x9b, 0x86, 0x52, 0x37, 0xc4, 0xe4, 0x42, 0x81, 0x0d, 0xf0, 0xe7, 0xf0, 0xf5,
	0x77, 0xb0, 0xfa, 0xe7, 0xe0, 0x52, 0x80, 0xb7, 0x90, 0xb7, 0x73, 0xcc, 0x21, 0x32, 0x7a, 0x9d,
	0x26, 0xac, 0x52, 0x09, 0x22, 0x5f, 0x38, 0x10, 0x93, 0xa9, 0x1f, 0x01, 0xc5, 0xae, 0x77, 0x6e,
	0xfc, 0x54, 0xa2, 0x28, 0x59, 0x7d, 0x23, 0x4f, 0xe3, 0x3e, 0xa7, 0x26, 0x9f, 0x7e, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xaa, 0x03, 0x27, 0x76, 0x6c, 0x01, 0x00, 0x00,
}
