syntax = "proto3";

package rpcpb;

service Node {
  rpc Hello(HelloRequest) returns (HelloResponse) {}
  rpc SubmitTx(SubmitTxRequest) returns (SubmitTxResponse) {}
  rpc Notify(NotifyRequest) returns (NotifyResponse) {}
}

message HelloRequest {}

message HelloResponse {}

enum TxStatusEnum {
  NOTEXIST = 0;  // transaction not exist
  REJECTED = 1;  // rejected because of some immediate error checking
  ACCEPTED = 2;  // transaction accepted but not yet confirmed by consensus
  CONFIRMED = 3; // transaction is valid and confirmed by consensus
  FAILED = 4;    // failed because of consensus 
}

message SubmitTxRequest {
  // transaction data in pb format
  bytes Data = 1;
  // digital signature of the data signed by 
  // the source account private key
  string Signature = 2;
}

message SubmitTxResponse {
  TxStatusEnum TxStatus = 1;
  // the transaction hash is only valid when the response
  // status is ACCEPTED or CONFIRMED 
  string TxHash = 2;
  // error message for REJECTED transaction
  string ErrorMessage = 3;
}

enum NotifyMsgType {
  Tx = 0;       // transaction message
  NOMINATE = 1; // consensus nomination message
}

message NotifyRequest {
  // type of message
  NotifyMsgType MsgType = 1;
  // message payload in pb format
  bytes Data = 2;
  // digital signature of the data signed by
  // the private key of peer node
  string Signature = 3;
}

message NotifyResponse {}
