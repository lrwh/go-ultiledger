syntax = "proto3";

package rpcpb;

service Node {
  rpc Hello(HelloRequest) returns (HelloResponse) {}
  rpc SubmitTx(SubmitTxRequest) returns (SubmitTxResponse) {}
  rpc QueryTx(QueryTxRequest) returns (QueryTxResponse) {}
  rpc Notify(NotifyRequest) returns (NotifyResponse) {}
  rpc Query(QueryRequest) returns (QueryResponse) {}
}

message HelloRequest {}

message HelloResponse {}

enum TxStatusCode {
  NOTEXIST = 0;  // transaction not exist
  REJECTED = 1;  // rejected because of some immediate error checking
  ACCEPTED = 2;  // transaction accepted but not yet confirmed by consensus
  CONFIRMED = 3; // transaction is valid and confirmed by consensus
  FAILED = 4;    // failed because of some error
}

message TxStatus {
  TxStatusCode StatusCode = 1;
  string ErrorMessage = 2;
}

message SubmitTxRequest {
  // transaction data in pb format
  bytes Data = 1;
  // transaction ULTKey
  string TxKey = 2;
  // digital signature of the data signed by 
  // the source account private key
  string Signature = 3;
}

message SubmitTxResponse {
  TxStatus TxStatus = 1;
}

message QueryTxRequest {
  // transaction ULTKey
  string TxKey = 1;
}

message QueryTxResponse {
  TxStatus TxStatus = 1;
}

enum NotifyMsgType {
  TX = 0;        // transaction message
  STATEMENT = 1; // consensus statement
}

message NotifyRequest {
  // type of message
  NotifyMsgType MsgType = 1;
  // message payload in pb format
  bytes Data = 2;
  // digital signature of the data signed by
  // the private key of peer node
  string Signature = 3;
}

message NotifyResponse {}

enum QueryMsgType {
  QUORUM = 0; // query quorum information
  TXSET = 1;  // query txset information
  LEDGER = 2; // query ledger information
}

message QueryRequest {
  // type of message
  QueryMsgType MsgType = 1;
  // message payload in pb format
  bytes Data = 2;
  // digital signature of the data signed by
  // the private key of peer node
  string Signature = 3;
}

message QueryResponse {
  // requested data encoded in pb format
  bytes Data = 1;
}
