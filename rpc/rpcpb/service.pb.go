// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
	TxStatus
	SubmitTxRequest
	SubmitTxResponse
	QueryTxRequest
	QueryTxResponse
	NotifyRequest
	NotifyResponse
	QueryRequest
	QueryResponse
*/
package rpcpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TxStatusCode int32

const (
	TxStatusCode_NOTEXIST  TxStatusCode = 0
	TxStatusCode_REJECTED  TxStatusCode = 1
	TxStatusCode_ACCEPTED  TxStatusCode = 2
	TxStatusCode_CONFIRMED TxStatusCode = 3
	TxStatusCode_FAILED    TxStatusCode = 4
)

var TxStatusCode_name = map[int32]string{
	0: "NOTEXIST",
	1: "REJECTED",
	2: "ACCEPTED",
	3: "CONFIRMED",
	4: "FAILED",
}
var TxStatusCode_value = map[string]int32{
	"NOTEXIST":  0,
	"REJECTED":  1,
	"ACCEPTED":  2,
	"CONFIRMED": 3,
	"FAILED":    4,
}

func (x TxStatusCode) String() string {
	return proto.EnumName(TxStatusCode_name, int32(x))
}
func (TxStatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NotifyMsgType int32

const (
	NotifyMsgType_TX        NotifyMsgType = 0
	NotifyMsgType_STATEMENT NotifyMsgType = 1
)

var NotifyMsgType_name = map[int32]string{
	0: "TX",
	1: "STATEMENT",
}
var NotifyMsgType_value = map[string]int32{
	"TX":        0,
	"STATEMENT": 1,
}

func (x NotifyMsgType) String() string {
	return proto.EnumName(NotifyMsgType_name, int32(x))
}
func (NotifyMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type QueryMsgType int32

const (
	QueryMsgType_QUORUM QueryMsgType = 0
	QueryMsgType_TXSET  QueryMsgType = 1
	QueryMsgType_LEDGER QueryMsgType = 2
)

var QueryMsgType_name = map[int32]string{
	0: "QUORUM",
	1: "TXSET",
	2: "LEDGER",
}
var QueryMsgType_value = map[string]int32{
	"QUORUM": 0,
	"TXSET":  1,
	"LEDGER": 2,
}

func (x QueryMsgType) String() string {
	return proto.EnumName(QueryMsgType_name, int32(x))
}
func (QueryMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type HelloRequest struct {
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HelloResponse struct {
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type TxStatus struct {
	StatusCode   TxStatusCode `protobuf:"varint,1,opt,name=StatusCode,enum=rpcpb.TxStatusCode" json:"StatusCode,omitempty"`
	ErrorMessage string       `protobuf:"bytes,2,opt,name=ErrorMessage" json:"ErrorMessage,omitempty"`
}

func (m *TxStatus) Reset()                    { *m = TxStatus{} }
func (m *TxStatus) String() string            { return proto.CompactTextString(m) }
func (*TxStatus) ProtoMessage()               {}
func (*TxStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TxStatus) GetStatusCode() TxStatusCode {
	if m != nil {
		return m.StatusCode
	}
	return TxStatusCode_NOTEXIST
}

func (m *TxStatus) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type SubmitTxRequest struct {
	// transaction data in pb format
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	// transaction ULTKey
	TxKey string `protobuf:"bytes,2,opt,name=TxKey" json:"TxKey,omitempty"`
	// digital signature of the data signed by
	// the source account private key
	Signature string `protobuf:"bytes,3,opt,name=Signature" json:"Signature,omitempty"`
}

func (m *SubmitTxRequest) Reset()                    { *m = SubmitTxRequest{} }
func (m *SubmitTxRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitTxRequest) ProtoMessage()               {}
func (*SubmitTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubmitTxRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SubmitTxRequest) GetTxKey() string {
	if m != nil {
		return m.TxKey
	}
	return ""
}

func (m *SubmitTxRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type SubmitTxResponse struct {
	TxStatus *TxStatus `protobuf:"bytes,1,opt,name=TxStatus" json:"TxStatus,omitempty"`
}

func (m *SubmitTxResponse) Reset()                    { *m = SubmitTxResponse{} }
func (m *SubmitTxResponse) String() string            { return proto.CompactTextString(m) }
func (*SubmitTxResponse) ProtoMessage()               {}
func (*SubmitTxResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SubmitTxResponse) GetTxStatus() *TxStatus {
	if m != nil {
		return m.TxStatus
	}
	return nil
}

type QueryTxRequest struct {
	// transaction ULTKey
	TxKey string `protobuf:"bytes,1,opt,name=TxKey" json:"TxKey,omitempty"`
}

func (m *QueryTxRequest) Reset()                    { *m = QueryTxRequest{} }
func (m *QueryTxRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryTxRequest) ProtoMessage()               {}
func (*QueryTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryTxRequest) GetTxKey() string {
	if m != nil {
		return m.TxKey
	}
	return ""
}

type QueryTxResponse struct {
	TxStatus *TxStatus `protobuf:"bytes,1,opt,name=TxStatus" json:"TxStatus,omitempty"`
}

func (m *QueryTxResponse) Reset()                    { *m = QueryTxResponse{} }
func (m *QueryTxResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryTxResponse) ProtoMessage()               {}
func (*QueryTxResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *QueryTxResponse) GetTxStatus() *TxStatus {
	if m != nil {
		return m.TxStatus
	}
	return nil
}

type NotifyRequest struct {
	// type of message
	MsgType NotifyMsgType `protobuf:"varint,1,opt,name=MsgType,enum=rpcpb.NotifyMsgType" json:"MsgType,omitempty"`
	// message payload in pb format
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	// digital signature of the data signed by
	// the private key of peer node
	Signature string `protobuf:"bytes,3,opt,name=Signature" json:"Signature,omitempty"`
}

func (m *NotifyRequest) Reset()                    { *m = NotifyRequest{} }
func (m *NotifyRequest) String() string            { return proto.CompactTextString(m) }
func (*NotifyRequest) ProtoMessage()               {}
func (*NotifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NotifyRequest) GetMsgType() NotifyMsgType {
	if m != nil {
		return m.MsgType
	}
	return NotifyMsgType_TX
}

func (m *NotifyRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NotifyRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type NotifyResponse struct {
}

func (m *NotifyResponse) Reset()                    { *m = NotifyResponse{} }
func (m *NotifyResponse) String() string            { return proto.CompactTextString(m) }
func (*NotifyResponse) ProtoMessage()               {}
func (*NotifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type QueryRequest struct {
	// type of message
	MsgType QueryMsgType `protobuf:"varint,1,opt,name=MsgType,enum=rpcpb.QueryMsgType" json:"MsgType,omitempty"`
	// message payload in pb format
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	// digital signature of the data signed by
	// the private key of peer node
	Signature string `protobuf:"bytes,3,opt,name=Signature" json:"Signature,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *QueryRequest) GetMsgType() QueryMsgType {
	if m != nil {
		return m.MsgType
	}
	return QueryMsgType_QUORUM
}

func (m *QueryRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *QueryRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type QueryResponse struct {
	// requested data encoded in pb format
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *QueryResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "rpcpb.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "rpcpb.HelloResponse")
	proto.RegisterType((*TxStatus)(nil), "rpcpb.TxStatus")
	proto.RegisterType((*SubmitTxRequest)(nil), "rpcpb.SubmitTxRequest")
	proto.RegisterType((*SubmitTxResponse)(nil), "rpcpb.SubmitTxResponse")
	proto.RegisterType((*QueryTxRequest)(nil), "rpcpb.QueryTxRequest")
	proto.RegisterType((*QueryTxResponse)(nil), "rpcpb.QueryTxResponse")
	proto.RegisterType((*NotifyRequest)(nil), "rpcpb.NotifyRequest")
	proto.RegisterType((*NotifyResponse)(nil), "rpcpb.NotifyResponse")
	proto.RegisterType((*QueryRequest)(nil), "rpcpb.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "rpcpb.QueryResponse")
	proto.RegisterEnum("rpcpb.TxStatusCode", TxStatusCode_name, TxStatusCode_value)
	proto.RegisterEnum("rpcpb.NotifyMsgType", NotifyMsgType_name, NotifyMsgType_value)
	proto.RegisterEnum("rpcpb.QueryMsgType", QueryMsgType_name, QueryMsgType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	SubmitTx(ctx context.Context, in *SubmitTxRequest, opts ...grpc.CallOption) (*SubmitTxResponse, error)
	QueryTx(ctx context.Context, in *QueryTxRequest, opts ...grpc.CallOption) (*QueryTxResponse, error)
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/rpcpb.Node/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SubmitTx(ctx context.Context, in *SubmitTxRequest, opts ...grpc.CallOption) (*SubmitTxResponse, error) {
	out := new(SubmitTxResponse)
	err := grpc.Invoke(ctx, "/rpcpb.Node/SubmitTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) QueryTx(ctx context.Context, in *QueryTxRequest, opts ...grpc.CallOption) (*QueryTxResponse, error) {
	out := new(QueryTxResponse)
	err := grpc.Invoke(ctx, "/rpcpb.Node/QueryTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	out := new(NotifyResponse)
	err := grpc.Invoke(ctx, "/rpcpb.Node/Notify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := grpc.Invoke(ctx, "/rpcpb.Node/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	SubmitTx(context.Context, *SubmitTxRequest) (*SubmitTxResponse, error)
	QueryTx(context.Context, *QueryTxRequest) (*QueryTxResponse, error)
	Notify(context.Context, *NotifyRequest) (*NotifyResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Node/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SubmitTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SubmitTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Node/SubmitTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SubmitTx(ctx, req.(*SubmitTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_QueryTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).QueryTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Node/QueryTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).QueryTx(ctx, req.(*QueryTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Node/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Node/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Node_Hello_Handler,
		},
		{
			MethodName: "SubmitTx",
			Handler:    _Node_SubmitTx_Handler,
		},
		{
			MethodName: "QueryTx",
			Handler:    _Node_QueryTx_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Node_Notify_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Node_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xdf, 0x6b, 0x13, 0x41,
	0x10, 0xce, 0x5d, 0x93, 0x34, 0x19, 0x2f, 0xc9, 0xb2, 0xa6, 0x35, 0x14, 0x1f, 0xca, 0x09, 0xa5,
	0x44, 0x0c, 0x98, 0x16, 0x04, 0x41, 0x25, 0x24, 0x5b, 0x8d, 0xf6, 0x2e, 0x76, 0x6f, 0x0b, 0xf1,
	0xf1, 0x12, 0xd7, 0x10, 0xa8, 0xbd, 0xeb, 0xfd, 0x90, 0xe4, 0x1f, 0xf2, 0xef, 0x94, 0xdb, 0xdb,
	0xbd, 0x5f, 0x8a, 0x0f, 0xe2, 0xdb, 0xcd, 0xec, 0x37, 0x33, 0xdf, 0x7c, 0x33, 0x73, 0xd0, 0x09,
	0x79, 0xf0, 0x63, 0xbb, 0xe6, 0x23, 0x3f, 0xf0, 0x22, 0x0f, 0x37, 0x02, 0x7f, 0xed, 0xaf, 0xcc,
	0x2e, 0x18, 0x1f, 0xf8, 0xdd, 0x9d, 0x47, 0xf9, 0x43, 0xcc, 0xc3, 0xc8, 0xec, 0x41, 0x47, 0xda,
	0xa1, 0xef, 0xdd, 0x87, 0xdc, 0x5c, 0x43, 0x8b, 0xed, 0x9c, 0xc8, 0x8d, 0xe2, 0x10, 0x5f, 0x00,
	0xa4, 0x5f, 0x53, 0xef, 0x2b, 0x1f, 0x68, 0xa7, 0xda, 0x79, 0x77, 0xfc, 0x78, 0x24, 0x12, 0x8d,
	0x14, 0x28, 0x79, 0xa2, 0x05, 0x18, 0x36, 0xc1, 0x20, 0x41, 0xe0, 0x05, 0x16, 0x0f, 0x43, 0x77,
	0xc3, 0x07, 0xfa, 0xa9, 0x76, 0xde, 0xa6, 0x25, 0x9f, 0xf9, 0x05, 0x7a, 0x4e, 0xbc, 0xfa, 0xbe,
	0x8d, 0xd8, 0x4e, 0x12, 0xc1, 0x18, 0xea, 0x33, 0x37, 0x72, 0x45, 0x15, 0x83, 0x8a, 0x6f, 0xdc,
	0x87, 0x06, 0xdb, 0x7d, 0xe2, 0x7b, 0x99, 0x23, 0x35, 0xf0, 0x53, 0x68, 0x3b, 0xdb, 0xcd, 0xbd,
	0x1b, 0xc5, 0x01, 0x1f, 0x1c, 0x88, 0x97, 0xdc, 0x61, 0xbe, 0x03, 0x94, 0xa7, 0x4e, 0x7b, 0xc2,
	0xcf, 0xf3, 0x9e, 0x44, 0xfe, 0x47, 0xe3, 0x5e, 0xa5, 0x0b, 0x9a, 0x01, 0xcc, 0x33, 0xe8, 0xde,
	0xc4, 0x3c, 0xd8, 0xe7, 0xd4, 0x32, 0x1a, 0x5a, 0x81, 0x86, 0xf9, 0x16, 0x7a, 0x19, 0xee, 0x5f,
	0xea, 0x3c, 0x40, 0xc7, 0xf6, 0xa2, 0xed, 0xb7, 0xbd, 0x2a, 0x33, 0x82, 0x43, 0x2b, 0xdc, 0xb0,
	0xbd, 0xaf, 0xa4, 0xee, 0xcb, 0xe0, 0x14, 0x26, 0xdf, 0xa8, 0x02, 0x65, 0x8a, 0xe9, 0x05, 0xc5,
	0xfe, 0xae, 0x0d, 0x82, 0xae, 0x2a, 0x29, 0xa7, 0xed, 0x81, 0x21, 0x9a, 0x50, 0x1c, 0x5e, 0x54,
	0x39, 0xa8, 0x71, 0x0b, 0xd4, 0x7f, 0xa0, 0xf0, 0x0c, 0x3a, 0xb2, 0xa0, 0xd4, 0xec, 0x0f, 0x73,
	0x1f, 0x3a, 0x60, 0x14, 0xd7, 0x0b, 0x1b, 0xd0, 0xb2, 0x17, 0x8c, 0x2c, 0xe7, 0x0e, 0x43, 0xb5,
	0xc4, 0xa2, 0xe4, 0x23, 0x99, 0x32, 0x32, 0x43, 0x5a, 0x62, 0x4d, 0xa6, 0x53, 0xf2, 0x39, 0xb1,
	0x74, 0xdc, 0x81, 0xf6, 0x74, 0x61, 0x5f, 0xcd, 0xa9, 0x45, 0x66, 0xe8, 0x00, 0x03, 0x34, 0xaf,
	0x26, 0xf3, 0x6b, 0x32, 0x43, 0xf5, 0xe1, 0x99, 0xd2, 0x5b, 0x91, 0x6f, 0x82, 0xce, 0x96, 0xa8,
	0x96, 0xc4, 0x38, 0x6c, 0xc2, 0x88, 0x45, 0x6c, 0x86, 0xb4, 0xe1, 0x4b, 0x29, 0x89, 0x82, 0x01,
	0x34, 0x6f, 0x6e, 0x17, 0xf4, 0xd6, 0x42, 0x35, 0xdc, 0x86, 0x06, 0x5b, 0x3a, 0x84, 0x21, 0x2d,
	0x71, 0x5f, 0x93, 0xd9, 0x7b, 0x42, 0x91, 0x3e, 0xfe, 0xa9, 0x43, 0xdd, 0x4e, 0x88, 0x5e, 0x42,
	0x43, 0x5c, 0x13, 0x56, 0xb2, 0x15, 0x6f, 0xed, 0xa4, 0x5f, 0x76, 0xca, 0x11, 0xd4, 0xf0, 0x1b,
	0x68, 0xa9, 0x95, 0xc5, 0xc7, 0x12, 0x53, 0x39, 0x8f, 0x93, 0x27, 0xbf, 0xf9, 0xb3, 0xf0, 0xd7,
	0x70, 0x28, 0x17, 0x11, 0x1f, 0x15, 0xa7, 0x95, 0x07, 0x1f, 0x57, 0xdd, 0x59, 0xec, 0x2b, 0x68,
	0xa6, 0xa2, 0xe0, 0xf2, 0xb2, 0xa9, 0xc8, 0xa3, 0x8a, 0x37, 0x0b, 0xbc, 0x84, 0x86, 0xc8, 0x86,
	0x4b, 0x0b, 0x52, 0xed, 0xb4, 0x34, 0x6a, 0xb3, 0xb6, 0x6a, 0x8a, 0x7f, 0xd1, 0xc5, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x61, 0x90, 0x53, 0xbb, 0x9c, 0x04, 0x00, 0x00,
}
