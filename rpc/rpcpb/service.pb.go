// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	HelloRequest
	HelloResponse
	SubmitTxRequest
	SubmitTxResponse
	NotifyRequest
	NotifyResponse
*/
package rpcpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TxStatusEnum int32

const (
	TxStatusEnum_NOTEXIST  TxStatusEnum = 0
	TxStatusEnum_REJECTED  TxStatusEnum = 1
	TxStatusEnum_ACCEPTED  TxStatusEnum = 2
	TxStatusEnum_CONFIRMED TxStatusEnum = 3
	TxStatusEnum_FAILED    TxStatusEnum = 4
)

var TxStatusEnum_name = map[int32]string{
	0: "NOTEXIST",
	1: "REJECTED",
	2: "ACCEPTED",
	3: "CONFIRMED",
	4: "FAILED",
}
var TxStatusEnum_value = map[string]int32{
	"NOTEXIST":  0,
	"REJECTED":  1,
	"ACCEPTED":  2,
	"CONFIRMED": 3,
	"FAILED":    4,
}

func (x TxStatusEnum) String() string {
	return proto.EnumName(TxStatusEnum_name, int32(x))
}
func (TxStatusEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NotifyMsgType int32

const (
	NotifyMsgType_Tx       NotifyMsgType = 0
	NotifyMsgType_NOMINATE NotifyMsgType = 1
)

var NotifyMsgType_name = map[int32]string{
	0: "Tx",
	1: "NOMINATE",
}
var NotifyMsgType_value = map[string]int32{
	"Tx":       0,
	"NOMINATE": 1,
}

func (x NotifyMsgType) String() string {
	return proto.EnumName(NotifyMsgType_name, int32(x))
}
func (NotifyMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type HelloRequest struct {
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HelloResponse struct {
}

func (m *HelloResponse) Reset()                    { *m = HelloResponse{} }
func (m *HelloResponse) String() string            { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()               {}
func (*HelloResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SubmitTxRequest struct {
	// transaction data in pb format
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	// digital signature of the data signed by
	// the source account private key
	Signature string `protobuf:"bytes,2,opt,name=Signature" json:"Signature,omitempty"`
}

func (m *SubmitTxRequest) Reset()                    { *m = SubmitTxRequest{} }
func (m *SubmitTxRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitTxRequest) ProtoMessage()               {}
func (*SubmitTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SubmitTxRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SubmitTxRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type SubmitTxResponse struct {
	TxStatus TxStatusEnum `protobuf:"varint,1,opt,name=TxStatus,enum=rpcpb.TxStatusEnum" json:"TxStatus,omitempty"`
	// the transaction hash is only valid when the response
	// status is ACCEPTED or CONFIRMED
	TxHash string `protobuf:"bytes,2,opt,name=TxHash" json:"TxHash,omitempty"`
	// error message for REJECTED transaction
	ErrorMessage string `protobuf:"bytes,3,opt,name=ErrorMessage" json:"ErrorMessage,omitempty"`
}

func (m *SubmitTxResponse) Reset()                    { *m = SubmitTxResponse{} }
func (m *SubmitTxResponse) String() string            { return proto.CompactTextString(m) }
func (*SubmitTxResponse) ProtoMessage()               {}
func (*SubmitTxResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubmitTxResponse) GetTxStatus() TxStatusEnum {
	if m != nil {
		return m.TxStatus
	}
	return TxStatusEnum_NOTEXIST
}

func (m *SubmitTxResponse) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *SubmitTxResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type NotifyRequest struct {
	// type of message
	MsgType NotifyMsgType `protobuf:"varint,1,opt,name=MsgType,enum=rpcpb.NotifyMsgType" json:"MsgType,omitempty"`
	// message payload in pb format
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	// digital signature of the data signed by
	// the private key of peer node
	Signature string `protobuf:"bytes,3,opt,name=Signature" json:"Signature,omitempty"`
}

func (m *NotifyRequest) Reset()                    { *m = NotifyRequest{} }
func (m *NotifyRequest) String() string            { return proto.CompactTextString(m) }
func (*NotifyRequest) ProtoMessage()               {}
func (*NotifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NotifyRequest) GetMsgType() NotifyMsgType {
	if m != nil {
		return m.MsgType
	}
	return NotifyMsgType_Tx
}

func (m *NotifyRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NotifyRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type NotifyResponse struct {
}

func (m *NotifyResponse) Reset()                    { *m = NotifyResponse{} }
func (m *NotifyResponse) String() string            { return proto.CompactTextString(m) }
func (*NotifyResponse) ProtoMessage()               {}
func (*NotifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*HelloRequest)(nil), "rpcpb.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "rpcpb.HelloResponse")
	proto.RegisterType((*SubmitTxRequest)(nil), "rpcpb.SubmitTxRequest")
	proto.RegisterType((*SubmitTxResponse)(nil), "rpcpb.SubmitTxResponse")
	proto.RegisterType((*NotifyRequest)(nil), "rpcpb.NotifyRequest")
	proto.RegisterType((*NotifyResponse)(nil), "rpcpb.NotifyResponse")
	proto.RegisterEnum("rpcpb.TxStatusEnum", TxStatusEnum_name, TxStatusEnum_value)
	proto.RegisterEnum("rpcpb.NotifyMsgType", NotifyMsgType_name, NotifyMsgType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	SubmitTx(ctx context.Context, in *SubmitTxRequest, opts ...grpc.CallOption) (*SubmitTxResponse, error)
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := grpc.Invoke(ctx, "/rpcpb.Node/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SubmitTx(ctx context.Context, in *SubmitTxRequest, opts ...grpc.CallOption) (*SubmitTxResponse, error) {
	out := new(SubmitTxResponse)
	err := grpc.Invoke(ctx, "/rpcpb.Node/SubmitTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	out := new(NotifyResponse)
	err := grpc.Invoke(ctx, "/rpcpb.Node/Notify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	SubmitTx(context.Context, *SubmitTxRequest) (*SubmitTxResponse, error)
	Notify(context.Context, *NotifyRequest) (*NotifyResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Node/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SubmitTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SubmitTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Node/SubmitTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SubmitTx(ctx, req.(*SubmitTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcpb.Node/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Node_Hello_Handler,
		},
		{
			MethodName: "SubmitTx",
			Handler:    _Node_SubmitTx_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Node_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x0f, 0x9a, 0x40,
	0x10, 0x15, 0x54, 0xaa, 0x13, 0x50, 0xb2, 0xb5, 0xd6, 0x98, 0x1e, 0x0c, 0x49, 0x13, 0xe3, 0x81,
	0x26, 0xb6, 0x49, 0x4f, 0x3d, 0x18, 0x58, 0x23, 0x4d, 0xc1, 0x06, 0xf6, 0xd0, 0x2b, 0xda, 0xad,
	0x25, 0x51, 0x41, 0x76, 0x69, 0xf0, 0xd4, 0x3f, 0xd5, 0x1f, 0xd8, 0x08, 0xbb, 0x7e, 0x35, 0xbd,
	0xf1, 0x1e, 0x6f, 0xde, 0xcc, 0xdb, 0x19, 0x30, 0x18, 0xcd, 0x7f, 0x25, 0x5b, 0x6a, 0x67, 0x79,
	0xca, 0x53, 0xd4, 0xce, 0xb3, 0x6d, 0xb6, 0xb1, 0x7a, 0xa0, 0xaf, 0xe8, 0x7e, 0x9f, 0x86, 0xf4,
	0x54, 0x50, 0xc6, 0xad, 0x3e, 0x18, 0x02, 0xb3, 0x2c, 0x3d, 0x32, 0x6a, 0x39, 0xd0, 0x8f, 0x8a,
	0xcd, 0x21, 0xe1, 0xa4, 0x14, 0x1a, 0x84, 0xa0, 0xe5, 0xc6, 0x3c, 0x1e, 0x29, 0x13, 0x65, 0xaa,
	0x87, 0xd5, 0x37, 0x7a, 0x03, 0xdd, 0x28, 0xd9, 0x1d, 0x63, 0x5e, 0xe4, 0x74, 0xa4, 0x4e, 0x94,
	0x69, 0x37, 0xbc, 0x11, 0xd6, 0x6f, 0x30, 0x6f, 0x26, 0xb5, 0x31, 0x7a, 0x07, 0x1d, 0x52, 0x46,
	0x3c, 0xe6, 0x05, 0xab, 0x9c, 0x7a, 0xf3, 0x97, 0x76, 0x35, 0x93, 0x2d, 0x69, 0x7c, 0x2c, 0x0e,
	0xe1, 0x55, 0x84, 0x86, 0xa0, 0x91, 0x72, 0x15, 0xb3, 0x9f, 0xc2, 0x5f, 0x20, 0x64, 0x81, 0x8e,
	0xf3, 0x3c, 0xcd, 0x7d, 0xca, 0x58, 0xbc, 0xa3, 0xa3, 0x66, 0xf5, 0xf7, 0x81, 0xb3, 0x4e, 0x60,
	0x04, 0x29, 0x4f, 0x7e, 0x9c, 0x65, 0x06, 0x1b, 0x5e, 0xf8, 0x6c, 0x47, 0xce, 0x19, 0x15, 0xcd,
	0x07, 0xa2, 0x79, 0x2d, 0x13, 0xff, 0x42, 0x29, 0xba, 0x66, 0x56, 0xff, 0x97, 0xb9, 0xf9, 0x9c,
	0xd9, 0x84, 0x9e, 0x6c, 0x59, 0x27, 0x9e, 0x45, 0xa0, 0xdf, 0x47, 0x43, 0x3a, 0x74, 0x82, 0x35,
	0xc1, 0xdf, 0xbc, 0x88, 0x98, 0x8d, 0x0b, 0x0a, 0xf1, 0x67, 0xec, 0x10, 0xec, 0x9a, 0xca, 0x05,
	0x2d, 0x1c, 0x07, 0x7f, 0xbd, 0x20, 0x15, 0x19, 0xd0, 0x75, 0xd6, 0xc1, 0xd2, 0x0b, 0x7d, 0xec,
	0x9a, 0x4d, 0x04, 0xa0, 0x2d, 0x17, 0xde, 0x17, 0xec, 0x9a, 0xad, 0xd9, 0x5b, 0x99, 0x4c, 0x4e,
	0xaa, 0x81, 0x4a, 0xca, 0xda, 0x2f, 0x58, 0xfb, 0x5e, 0xb0, 0x20, 0xd8, 0x54, 0xe6, 0x7f, 0x14,
	0x68, 0x05, 0xe9, 0x77, 0x8a, 0x3e, 0x40, 0xbb, 0x5a, 0x30, 0x92, 0xaf, 0x7d, 0xbf, 0xfe, 0xf1,
	0xe0, 0x91, 0x14, 0x37, 0xd0, 0x40, 0x9f, 0xa0, 0x23, 0x17, 0x88, 0x86, 0x42, 0xf3, 0x74, 0x16,
	0xe3, 0xd7, 0xff, 0xf0, 0xd7, 0xf2, 0x8f, 0xa0, 0xd5, 0x43, 0xa2, 0xc7, 0x67, 0x96, 0xa5, 0xaf,
	0x9e, 0x58, 0x59, 0xb8, 0xd1, 0xaa, 0x63, 0x7d, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x27, 0x3f,
	0x4d, 0xed, 0xbd, 0x02, 0x00, 0x00,
}
